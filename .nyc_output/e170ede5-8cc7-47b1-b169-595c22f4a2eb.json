{"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\utility\\Injector.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\utility\\Injector.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":5,"column":8},"end":{"line":5,"column":32}},"2":{"start":{"line":6,"column":8},"end":{"line":11,"column":10}},"3":{"start":{"line":7,"column":39},"end":{"line":7,"column":99}},"4":{"start":{"line":8,"column":33},"end":{"line":8,"column":83}},"5":{"start":{"line":9,"column":31},"end":{"line":9,"column":71}},"6":{"start":{"line":10,"column":30},"end":{"line":10,"column":69}},"7":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"8":{"start":{"line":15,"column":12},"end":{"line":15,"column":44}},"9":{"start":{"line":17,"column":8},"end":{"line":19,"column":9}},"10":{"start":{"line":18,"column":12},"end":{"line":18,"column":48}},"11":{"start":{"line":20,"column":25},"end":{"line":20,"column":58}},"12":{"start":{"line":21,"column":8},"end":{"line":21,"column":44}},"13":{"start":{"line":22,"column":8},"end":{"line":22,"column":24}},"14":{"start":{"line":25,"column":8},"end":{"line":25,"column":44}},"15":{"start":{"line":26,"column":8},"end":{"line":26,"column":24}},"16":{"start":{"line":29,"column":8},"end":{"line":29,"column":51}},"17":{"start":{"line":32,"column":8},"end":{"line":32,"column":40}},"18":{"start":{"line":35,"column":8},"end":{"line":35,"column":47}},"19":{"start":{"line":38,"column":17},"end":{"line":38,"column":31}},"20":{"start":{"line":39,"column":0},"end":{"line":39,"column":27}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":4},"end":{"line":4,"column":5}},"loc":{"start":{"line":4,"column":18},"end":{"line":12,"column":5}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":33},"end":{"line":7,"column":34}},"loc":{"start":{"line":7,"column":39},"end":{"line":7,"column":99}},"line":7},"2":{"name":"(anonymous_2)","decl":{"start":{"line":8,"column":27},"end":{"line":8,"column":28}},"loc":{"start":{"line":8,"column":33},"end":{"line":8,"column":83}},"line":8},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":25},"end":{"line":9,"column":26}},"loc":{"start":{"line":9,"column":31},"end":{"line":9,"column":71}},"line":9},"4":{"name":"(anonymous_4)","decl":{"start":{"line":10,"column":24},"end":{"line":10,"column":25}},"loc":{"start":{"line":10,"column":30},"end":{"line":10,"column":69}},"line":10},"5":{"name":"(anonymous_5)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":14},"end":{"line":23,"column":5}},"line":13},"6":{"name":"(anonymous_6)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":24},"end":{"line":27,"column":5}},"line":24},"7":{"name":"(anonymous_7)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":28},"end":{"line":30,"column":5}},"line":28},"8":{"name":"(anonymous_8)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":17},"end":{"line":33,"column":5}},"line":31},"9":{"name":"(anonymous_9)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":21},"end":{"line":36,"column":5}},"line":34}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},{"start":{"line":14,"column":8},"end":{"line":16,"column":9}}],"line":14},"1":{"loc":{"start":{"line":17,"column":8},"end":{"line":19,"column":9}},"type":"if","locations":[{"start":{"line":17,"column":8},"end":{"line":19,"column":9}},{"start":{"line":17,"column":8},"end":{"line":19,"column":9}}],"line":17}},"s":{"0":1,"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":128,"8":127,"9":1,"10":0,"11":1,"12":1,"13":1,"14":4,"15":4,"16":0,"17":0,"18":0,"19":1,"20":1},"f":{"0":1,"1":0,"2":1,"3":0,"4":0,"5":128,"6":4,"7":0,"8":0,"9":0},"b":{"0":[127,1],"1":[0,1]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/utility/Injector.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/utility/Injector.ts"],"names":[],"mappings":";;AAAA,MAAM,QAAQ;IAAd;QACY,kBAAa,GAA2B,EAAE,CAAA;QAE1C,yBAAoB,GAAiC;YACzD,mBAAmB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,mCAAmC,CAAC,CAAC,CAAC,OAAO,EAAE;YACvF,aAAa,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC,CAAC,OAAO,EAAE;YACvE,WAAW,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,OAAO,EAAE;YAC3D,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,EAAE;SAC5D,CAAA;IA8BL,CAAC;IA5BU,GAAG,CAAI,IAAY;QACtB,IAAI,IAAI,IAAI,IAAI,CAAC,aAAa,EAAE;YAC5B,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SACnC;QACD,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,oBAAoB,CAAC,EAAE;YACtC,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SACvC;QACD,MAAM,QAAQ,GAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,CAAC;QACtD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;QACpC,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEM,GAAG,CAAI,IAAY,EAAE,QAAa;QACrC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;QACpC,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEM,OAAO,CAAC,IAAY,EAAE,QAAmB;QAC5C,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;IAC/C,CAAC;IAEM,MAAM,CAAC,IAAY;QACtB,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAEM,UAAU,CAAC,IAAY;QAC1B,OAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;CACJ;AAED,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;AAEhC,kBAAe,QAAQ,CAAC","sourcesContent":["class Injector {\r\n    private instancesPool: { [key: string]: any } = {}\r\n\r\n    private lazyInstancesFactory: { [key: string]: () => any } = {\r\n        ServiceConfigSource: () => new (require('../lookup/FileServiceConfigSource')).default(),\r\n        ServiceLookup: () => new (require('../lookup/ServiceLookup')).default(),\r\n        IdGenerator: () => new (require('./IdGenerator')).default(),\r\n        FetchProxy: () => new (require('./FetchProxy')).default()\r\n    }\r\n\r\n    public get<T>(name: string): T {\r\n        if (name in this.instancesPool) {\r\n            return this.instancesPool[name];\r\n        }\r\n        if (!(name in this.lazyInstancesFactory)) {\r\n            throw new Error('Instance not set');\r\n        }\r\n        const instance: T = this.lazyInstancesFactory[name]();\r\n        this.instancesPool[name] = instance;\r\n        return instance;\r\n    }\r\n\r\n    public set<T>(name: string, instance: any): T {\r\n        this.instancesPool[name] = instance;\r\n        return instance;\r\n    }\r\n\r\n    public setLazy(name: string, instance: () => any): void {\r\n        this.lazyInstancesFactory[name] = instance;\r\n    }\r\n\r\n    public remove(name: string): void {\r\n        delete this.instancesPool[name];\r\n    }\r\n\r\n    public removeLazy(name: string): void {\r\n        delete this.lazyInstancesFactory[name];\r\n    }\r\n}\r\n\r\nconst injector = new Injector();\r\n\r\nexport default injector;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"255cf196adab20c5b03b3cc527d2e1b5f64386df","contentHash":"5d324c11baa173695c185b599b48f06d1e7aec8d4492aedeb341e4871956b677"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\lookup\\FileServiceConfigSource.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\lookup\\FileServiceConfigSource.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":5,"column":8},"end":{"line":5,"column":33}},"2":{"start":{"line":6,"column":8},"end":{"line":6,"column":31}},"3":{"start":{"line":7,"column":28},"end":{"line":7,"column":45}},"4":{"start":{"line":8,"column":8},"end":{"line":14,"column":9}},"5":{"start":{"line":9,"column":32},"end":{"line":9,"column":54}},"6":{"start":{"line":10,"column":12},"end":{"line":10,"column":58}},"7":{"start":{"line":11,"column":12},"end":{"line":13,"column":13}},"8":{"start":{"line":12,"column":16},"end":{"line":12,"column":55}},"9":{"start":{"line":17,"column":8},"end":{"line":17,"column":35}},"10":{"start":{"line":20,"column":8},"end":{"line":20,"column":33}},"11":{"start":{"line":23,"column":0},"end":{"line":23,"column":42}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":4},"end":{"line":4,"column":5}},"loc":{"start":{"line":4,"column":60},"end":{"line":15,"column":5}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":24},"end":{"line":18,"column":5}},"line":16},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":22},"end":{"line":21,"column":5}},"line":19}},"branchMap":{"0":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":58}},"type":"default-arg","locations":[{"start":{"line":4,"column":27},"end":{"line":4,"column":58}}],"line":4}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":2,"6":2,"7":2,"8":6,"9":24,"10":161,"11":1},"f":{"0":1,"1":24,"2":161},"b":{"0":[0]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/lookup/FileServiceConfigSource.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/lookup/FileServiceConfigSource.ts"],"names":[],"mappings":";;AAGA,MAAM,uBAAuB;IAIzB,YAAY,WAAmB,+BAA+B;QAHtD,mBAAc,GAAsC,EAAE,CAAC;QACvD,iBAAY,GAA8B,EAAE,CAAC;QAGjD,MAAM,WAAW,GAAqB,OAAO,CAAC,QAAQ,CAAC,CAAC;QACxD,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;YAClC,MAAM,WAAW,GAAW,UAAU,CAAC,WAAW,CAAC;YACnD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,GAAG,UAAU,CAAC;YAC9C,KAAK,MAAM,KAAK,IAAI,UAAU,CAAC,MAAM,EAAE;gBACnC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC;aAC1C;SACJ;IACL,CAAC;IAEM,iBAAiB;QACpB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAEM,eAAe;QAClB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;CACJ;AAED,kBAAe,uBAAuB,CAAC","sourcesContent":["import IServiceConfig from '../data-model/IServiceConfig';\r\nimport IServiceConfigSource from './IServiceConfigSource';\r\n\r\nclass FileServiceConfigSource implements IServiceConfigSource {\r\n    private serviceConfigs: { [key: string]: IServiceConfig } = {};\r\n    private tableMapping: { [key: string]: string } = {};\r\n\r\n    constructor(fileName: string = '../../res/service_config.json') {\r\n        const fileConfigs: IServiceConfig[] = require(fileName);\r\n        for (const fileConfig of fileConfigs) {\r\n            const serviceName: string = fileConfig.serviceName;\r\n            this.serviceConfigs[serviceName] = fileConfig;\r\n            for (const table of fileConfig.tables) {\r\n                this.tableMapping[table] = serviceName;\r\n            }\r\n        }\r\n    }\r\n\r\n    public getServiceConfigs(): { [key: string]: IServiceConfig } {\r\n        return this.serviceConfigs;\r\n    }\r\n\r\n    public getTableMapping(): { [key: string]: string } {\r\n        return this.tableMapping;\r\n    }\r\n}\r\n\r\nexport default FileServiceConfigSource;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8f42008dbd653749130282022e5ce869c3071e47","contentHash":"0fe2a72702de1371b275ca5a4b7b5095ad6bf87101fde712145fedf4e7b73ba9"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\utility\\IdGenerator.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\utility\\IdGenerator.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":34}},"2":{"start":{"line":6,"column":22},"end":{"line":6,"column":119}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":23}},"4":{"start":{"line":10,"column":0},"end":{"line":10,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":4},"end":{"line":5,"column":5}},"loc":{"start":{"line":5,"column":12},"end":{"line":8,"column":5}},"line":5}},"branchMap":{},"s":{"0":1,"1":1,"2":0,"3":0,"4":1},"f":{"0":0},"b":{},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/utility/IdGenerator.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/utility/IdGenerator.ts"],"names":[],"mappings":";;AAAA,mCAAwC;AAExC,MAAM,WAAW;IACN,KAAK;QACR,MAAM,KAAK,GAAG,IAAA,uBAAc,EAAC,gEAAgE,EAAE,CAAC,CAAC,CAAA;QACjG,OAAO,KAAK,EAAE,CAAC;IACnB,CAAC;CACJ;AAED,kBAAe,WAAW,CAAC","sourcesContent":["import { customAlphabet } from 'nanoid';\r\n\r\nclass IdGenerator {\r\n    public nano8(): string {\r\n        const nano8 = customAlphabet('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', 8)\r\n        return nano8();\r\n    }\r\n}\r\n\r\nexport default IdGenerator;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"01c66762ea0d7f5d3814ecfc4abf0a5c6f013bb0","contentHash":"0060ddd7ddb4565a279696b3c3d94095303f81c174e7beb783d7c81149d4ca73"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\converter\\UnifyQLtoSQLConverter.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\converter\\UnifyQLtoSQLConverter.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":32},"end":{"line":6,"column":101}},"4":{"start":{"line":9,"column":24},"end":{"line":9,"column":69}},"5":{"start":{"line":10,"column":23},"end":{"line":10,"column":25}},"6":{"start":{"line":11,"column":28},"end":{"line":11,"column":61}},"7":{"start":{"line":12,"column":8},"end":{"line":12,"column":39}},"8":{"start":{"line":13,"column":8},"end":{"line":19,"column":9}},"9":{"start":{"line":14,"column":32},"end":{"line":14,"column":65}},"10":{"start":{"line":15,"column":12},"end":{"line":15,"column":72}},"11":{"start":{"line":18,"column":12},"end":{"line":18,"column":51}},"12":{"start":{"line":20,"column":8},"end":{"line":20,"column":54}},"13":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"14":{"start":{"line":22,"column":12},"end":{"line":22,"column":63}},"15":{"start":{"line":24,"column":8},"end":{"line":32,"column":9}},"16":{"start":{"line":25,"column":12},"end":{"line":30,"column":13}},"17":{"start":{"line":26,"column":16},"end":{"line":26,"column":35}},"18":{"start":{"line":29,"column":16},"end":{"line":29,"column":37}},"19":{"start":{"line":31,"column":12},"end":{"line":31,"column":39}},"20":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"21":{"start":{"line":34,"column":12},"end":{"line":34,"column":65}},"22":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"23":{"start":{"line":37,"column":12},"end":{"line":37,"column":74}},"24":{"start":{"line":39,"column":8},"end":{"line":39,"column":32}},"25":{"start":{"line":42,"column":0},"end":{"line":42,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":21},"end":{"line":40,"column":5}},"line":8}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":13,"column":8},"end":{"line":19,"column":9}},"type":"if","locations":[{"start":{"line":13,"column":8},"end":{"line":19,"column":9}},{"start":{"line":13,"column":8},"end":{"line":19,"column":9}}],"line":13},"4":{"loc":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},{"start":{"line":21,"column":8},"end":{"line":23,"column":9}}],"line":21},"5":{"loc":{"start":{"line":24,"column":8},"end":{"line":32,"column":9}},"type":"if","locations":[{"start":{"line":24,"column":8},"end":{"line":32,"column":9}},{"start":{"line":24,"column":8},"end":{"line":32,"column":9}}],"line":24},"6":{"loc":{"start":{"line":25,"column":12},"end":{"line":30,"column":13}},"type":"if","locations":[{"start":{"line":25,"column":12},"end":{"line":30,"column":13}},{"start":{"line":25,"column":12},"end":{"line":30,"column":13}}],"line":25},"7":{"loc":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},{"start":{"line":33,"column":8},"end":{"line":35,"column":9}}],"line":33},"8":{"loc":{"start":{"line":33,"column":12},"end":{"line":33,"column":73}},"type":"binary-expr","locations":[{"start":{"line":33,"column":12},"end":{"line":33,"column":41}},{"start":{"line":33,"column":45},"end":{"line":33,"column":73}}],"line":33},"9":{"loc":{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":38,"column":9}},{"start":{"line":36,"column":8},"end":{"line":38,"column":9}}],"line":36},"10":{"loc":{"start":{"line":36,"column":12},"end":{"line":36,"column":69}},"type":"binary-expr","locations":[{"start":{"line":36,"column":12},"end":{"line":36,"column":39}},{"start":{"line":36,"column":43},"end":{"line":36,"column":69}}],"line":36}},"s":{"0":1,"1":1,"2":1,"3":1,"4":4,"5":4,"6":4,"7":4,"8":4,"9":1,"10":1,"11":3,"12":4,"13":4,"14":1,"15":4,"16":3,"17":1,"18":2,"19":3,"20":4,"21":2,"22":4,"23":2,"24":4,"25":1},"f":{"0":1,"1":4},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[1,3],"4":[1,3],"5":[3,1],"6":[1,2],"7":[2,2],"8":[4,2],"9":[2,2],"10":[4,2]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/converter/UnifyQLtoSQLConverter.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/converter/UnifyQLtoSQLConverter.ts"],"names":[],"mappings":";;;;;AACA,sGAAyE;AAEzE,MAAM,qBAAqB;IAChB,OAAO,CAAC,OAAe;QAC1B,MAAM,OAAO,GAAG,IAAA,+BAAgB,EAAC,OAAO,CAAC,CAAC;QAC1C,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,MAAM,WAAW,GAAW,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9D,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/B,IAAI,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACnC,MAAM,WAAW,GAAW,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC,IAAI,CAAC,UAAU,OAAO,CAAC,WAAW,IAAI,WAAW,EAAE,CAAC,CAAC;SAC/D;aAAM;YACH,MAAM,CAAC,IAAI,CAAC,UAAU,WAAW,IAAI,CAAC,CAAC;SAC1C;QACD,MAAM,CAAC,IAAI,CAAC,QAAQ,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC9C,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3B,MAAM,CAAC,IAAI,CAAC,SAAS,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;SACtD;QACD,IAAI,OAAO,CAAC,KAAK,KAAK,EAAE,EAAE;YACtB,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACtB;iBAAM;gBACH,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACxB;YACD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC9B;QACD,IAAI,OAAO,CAAC,OAAO,KAAK,SAAS,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YAC/D,MAAM,CAAC,IAAI,CAAC,YAAY,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SACxD;QACD,IAAI,OAAO,CAAC,KAAK,KAAK,SAAS,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3D,MAAM,CAAC,IAAI,CAAC,SAAS,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;SACjE;QACD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;CACJ;AAED,kBAAe,qBAAqB,CAAC","sourcesContent":["import IUnifyQLConverter from \"./IUnifyQLConverter\";\r\nimport extractQLElement from \"../unify-ql-element/ExtractUnifyQlElement\";\r\n\r\nclass UnifyQLtoSQLConverter implements IUnifyQLConverter {\r\n    public convert(unifyQl: string): string {\r\n        const element = extractQLElement(unifyQl);\r\n        const result: string[] = [];\r\n        const targetTable: string = element.queryTarget.split('.')[0];\r\n        element.with.push(targetTable);\r\n        if (element.queryTarget.includes('.')) {\r\n            const targetField: string = element.queryTarget.split('.')[1];\r\n            result.push(`SELECT ${element.queryTarget} ${targetField}`);\r\n        } else {\r\n            result.push(`SELECT ${targetTable}.*`);\r\n        }\r\n        result.push(`FROM ${element.with.join(',')}`);\r\n        if (element.link.length !== 0) {\r\n            result.push(`WHERE ${element.link.join(' AND ')}`);\r\n        }\r\n        if (element.where !== '') {\r\n            if (element.link.length !== 0) {\r\n                result.push('AND');\r\n            } else {\r\n                result.push('WHERE');\r\n            }\r\n            result.push(element.where);\r\n        }\r\n        if (element.orderBy !== undefined && element.orderBy.length !== 0) {\r\n            result.push(`ORDER BY ${element.orderBy.join(',')}`);\r\n        }\r\n        if (element.limit !== undefined && element.limit.length !== 0) {\r\n            result.push(`LIMIT ${element.limit[0]}, ${element.limit[1]}`);\r\n        }\r\n        return result.join(' ');\r\n    }\r\n}\r\n\r\nexport default UnifyQLtoSQLConverter;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"92349ae8d408cb2ad7ddd617215c7c833651ade9","contentHash":"4dd19c2cc38823d59063e72d7f296658a7297dcac620c828ee6d64f7500e6a5f"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\unify-ql-element\\ExtractUnifyQlElement.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\unify-ql-element\\ExtractUnifyQlElement.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":4,"column":19},"end":{"line":9,"column":5}},"2":{"start":{"line":10,"column":18},"end":{"line":10,"column":66}},"3":{"start":{"line":11,"column":26},"end":{"line":11,"column":69}},"4":{"start":{"line":11,"column":60},"end":{"line":11,"column":68}},"5":{"start":{"line":12,"column":4},"end":{"line":35,"column":5}},"6":{"start":{"line":12,"column":17},"end":{"line":12,"column":18}},"7":{"start":{"line":13,"column":24},"end":{"line":13,"column":40}},"8":{"start":{"line":14,"column":22},"end":{"line":14,"column":42}},"9":{"start":{"line":15,"column":8},"end":{"line":34,"column":9}},"10":{"start":{"line":17,"column":16},"end":{"line":17,"column":43}},"11":{"start":{"line":18,"column":16},"end":{"line":18,"column":22}},"12":{"start":{"line":20,"column":16},"end":{"line":20,"column":53}},"13":{"start":{"line":21,"column":16},"end":{"line":21,"column":22}},"14":{"start":{"line":23,"column":16},"end":{"line":23,"column":53}},"15":{"start":{"line":24,"column":16},"end":{"line":24,"column":22}},"16":{"start":{"line":26,"column":16},"end":{"line":26,"column":37}},"17":{"start":{"line":27,"column":16},"end":{"line":27,"column":22}},"18":{"start":{"line":29,"column":16},"end":{"line":29,"column":56}},"19":{"start":{"line":30,"column":16},"end":{"line":30,"column":22}},"20":{"start":{"line":32,"column":16},"end":{"line":32,"column":76}},"21":{"start":{"line":32,"column":63},"end":{"line":32,"column":74}},"22":{"start":{"line":33,"column":16},"end":{"line":33,"column":22}},"23":{"start":{"line":36,"column":4},"end":{"line":36,"column":18}},"24":{"start":{"line":38,"column":0},"end":{"line":38,"column":35}}},"fnMap":{"0":{"name":"extractQLElement","decl":{"start":{"line":3,"column":9},"end":{"line":3,"column":25}},"loc":{"start":{"line":3,"column":36},"end":{"line":37,"column":1}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":55},"end":{"line":11,"column":56}},"loc":{"start":{"line":11,"column":60},"end":{"line":11,"column":68}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":32,"column":58},"end":{"line":32,"column":59}},"loc":{"start":{"line":32,"column":63},"end":{"line":32,"column":74}},"line":32}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":8},"end":{"line":34,"column":9}},"type":"switch","locations":[{"start":{"line":16,"column":12},"end":{"line":18,"column":22}},{"start":{"line":19,"column":12},"end":{"line":21,"column":22}},{"start":{"line":22,"column":12},"end":{"line":24,"column":22}},{"start":{"line":25,"column":12},"end":{"line":27,"column":22}},{"start":{"line":28,"column":12},"end":{"line":30,"column":22}},{"start":{"line":31,"column":12},"end":{"line":33,"column":22}}],"line":15}},"s":{"0":1,"1":11,"2":11,"3":11,"4":83,"5":11,"6":11,"7":36,"8":36,"9":36,"10":11,"11":11,"12":5,"13":5,"14":5,"15":5,"16":7,"17":7,"18":4,"19":4,"20":4,"21":8,"22":4,"23":11,"24":1},"f":{"0":11,"1":83,"2":8},"b":{"0":[11,5,5,7,4,4]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/unify-ql-element/ExtractUnifyQlElement.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/unify-ql-element/ExtractUnifyQlElement.ts"],"names":[],"mappings":";;AAEA,SAAwB,gBAAgB,CAAC,QAAgB;IACrD,MAAM,MAAM,GAAe;QACvB,WAAW,EAAE,EAAE;QACf,IAAI,EAAE,EAAE;QACR,IAAI,EAAE,EAAE;QACR,KAAK,EAAE,EAAE;KACZ,CAAA;IAED,MAAM,KAAK,GAAW,gDAAgD,CAAC;IACvE,MAAM,aAAa,GAAa,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;IAC5E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;QAC9C,MAAM,OAAO,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,KAAK,GAAG,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACnC,QAAQ,OAAO,EAAE;YACb,KAAK,OAAO;gBACR,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC;gBAC3B,MAAM;YACV,KAAK,MAAM;gBACP,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBACrC,MAAM;YACV,KAAK,MAAM;gBACP,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBACrC,MAAM;YACV,KAAK,OAAO;gBACR,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;gBACrB,MAAM;YACV,KAAK,UAAU;gBACX,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBACxC,MAAM;YACV,KAAK,OAAO;gBACR,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5D,MAAM;SACb;KACJ;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AApCD,mCAoCC","sourcesContent":["import IQLElement from \"./IUnifyQLElement\";\r\n\r\nexport default function extractQLElement(queryStr: string): IQLElement {\r\n    const result: IQLElement = {\r\n        queryTarget: '',\r\n        with: [],\r\n        link: [],\r\n        where: ''\r\n    }\r\n\r\n    const regex: RegExp = /\\s*(QUERY|WITH|LINK|WHERE|ORDER BY|LIMIT)\\s*/gm;\r\n    const splitQueryStr: string[] = queryStr.split(regex).filter(e => e !== '');\r\n    for (let i = 0; i < splitQueryStr.length; i += 2) {\r\n        const keyword = splitQueryStr[i];\r\n        const value = splitQueryStr[i + 1];\r\n        switch (keyword) {\r\n            case 'QUERY':\r\n                result.queryTarget = value;\r\n                break;\r\n            case 'WITH':\r\n                result.with = value.split(/\\s*,\\s*/);\r\n                break;\r\n            case 'LINK':\r\n                result.link = value.split(/\\s*,\\s*/);\r\n                break;\r\n            case 'WHERE':\r\n                result.where = value;\r\n                break;\r\n            case 'ORDER BY':\r\n                result.orderBy = value.split(/\\s*,\\s*/);\r\n                break;\r\n            case 'LIMIT':\r\n                result.limit = value.split(/\\s*,\\s*/).map(e => parseInt(e));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"feacdc1c1be845f90ae99af016d074f17b3f298c","contentHash":"c3b14488c851791debbd934ea02a189716dc07b3f7a086b45fbf127320d41211"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\query-chain\\QueryChainBuilder.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\query-chain\\QueryChainBuilder.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":21},"end":{"line":6,"column":61}},"4":{"start":{"line":7,"column":30},"end":{"line":7,"column":90}},"5":{"start":{"line":10,"column":8},"end":{"line":10,"column":25}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":38}},"7":{"start":{"line":12,"column":8},"end":{"line":12,"column":43}},"8":{"start":{"line":13,"column":28},"end":{"line":13,"column":63}},"9":{"start":{"line":14,"column":8},"end":{"line":26,"column":9}},"10":{"start":{"line":15,"column":34},"end":{"line":15,"column":64}},"11":{"start":{"line":16,"column":12},"end":{"line":18,"column":13}},"12":{"start":{"line":17,"column":16},"end":{"line":17,"column":93}},"13":{"start":{"line":19,"column":12},"end":{"line":19,"column":120}},"14":{"start":{"line":20,"column":12},"end":{"line":25,"column":15}},"15":{"start":{"line":29,"column":35},"end":{"line":29,"column":37}},"16":{"start":{"line":30,"column":36},"end":{"line":30,"column":38}},"17":{"start":{"line":31,"column":28},"end":{"line":31,"column":41}},"18":{"start":{"line":32,"column":27},"end":{"line":32,"column":29}},"19":{"start":{"line":33,"column":24},"end":{"line":33,"column":33}},"20":{"start":{"line":34,"column":8},"end":{"line":54,"column":9}},"21":{"start":{"line":35,"column":26},"end":{"line":35,"column":47}},"22":{"start":{"line":36,"column":29},"end":{"line":36,"column":60}},"23":{"start":{"line":37,"column":12},"end":{"line":40,"column":13}},"24":{"start":{"line":38,"column":16},"end":{"line":38,"column":41}},"25":{"start":{"line":39,"column":16},"end":{"line":39,"column":25}},"26":{"start":{"line":41,"column":32},"end":{"line":41,"column":53}},"27":{"start":{"line":42,"column":35},"end":{"line":42,"column":40}},"28":{"start":{"line":43,"column":12},"end":{"line":49,"column":13}},"29":{"start":{"line":44,"column":16},"end":{"line":45,"column":29}},"30":{"start":{"line":45,"column":20},"end":{"line":45,"column":29}},"31":{"start":{"line":46,"column":16},"end":{"line":46,"column":40}},"32":{"start":{"line":47,"column":16},"end":{"line":47,"column":96}},"33":{"start":{"line":48,"column":16},"end":{"line":48,"column":47}},"34":{"start":{"line":50,"column":12},"end":{"line":52,"column":13}},"35":{"start":{"line":51,"column":16},"end":{"line":51,"column":35}},"36":{"start":{"line":53,"column":12},"end":{"line":53,"column":37}},"37":{"start":{"line":55,"column":8},"end":{"line":55,"column":38}},"38":{"start":{"line":56,"column":8},"end":{"line":56,"column":26}},"39":{"start":{"line":57,"column":8},"end":{"line":72,"column":9}},"40":{"start":{"line":58,"column":26},"end":{"line":58,"column":47}},"41":{"start":{"line":59,"column":29},"end":{"line":59,"column":60}},"42":{"start":{"line":60,"column":12},"end":{"line":63,"column":13}},"43":{"start":{"line":61,"column":16},"end":{"line":61,"column":41}},"44":{"start":{"line":62,"column":16},"end":{"line":62,"column":25}},"45":{"start":{"line":64,"column":32},"end":{"line":64,"column":53}},"46":{"start":{"line":65,"column":12},"end":{"line":70,"column":13}},"47":{"start":{"line":66,"column":16},"end":{"line":67,"column":29}},"48":{"start":{"line":67,"column":20},"end":{"line":67,"column":29}},"49":{"start":{"line":68,"column":16},"end":{"line":68,"column":120}},"50":{"start":{"line":69,"column":16},"end":{"line":69,"column":47}},"51":{"start":{"line":71,"column":12},"end":{"line":71,"column":37}},"52":{"start":{"line":73,"column":8},"end":{"line":73,"column":81}},"53":{"start":{"line":76,"column":8},"end":{"line":77,"column":27}},"54":{"start":{"line":77,"column":12},"end":{"line":77,"column":27}},"55":{"start":{"line":78,"column":8},"end":{"line":78,"column":32}},"56":{"start":{"line":81,"column":21},"end":{"line":81,"column":40}},"57":{"start":{"line":82,"column":21},"end":{"line":82,"column":39}},"58":{"start":{"line":83,"column":22},"end":{"line":83,"column":40}},"59":{"start":{"line":84,"column":8},"end":{"line":89,"column":10}},"60":{"start":{"line":92,"column":0},"end":{"line":92,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":54},"end":{"line":27,"column":5}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":12},"end":{"line":74,"column":5}},"line":28},"3":{"name":"(anonymous_3)","decl":{"start":{"line":75,"column":4},"end":{"line":75,"column":5}},"loc":{"start":{"line":75,"column":42},"end":{"line":79,"column":5}},"line":75},"4":{"name":"(anonymous_4)","decl":{"start":{"line":80,"column":4},"end":{"line":80,"column":5}},"loc":{"start":{"line":80,"column":30},"end":{"line":90,"column":5}},"line":80}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":16,"column":12},"end":{"line":18,"column":13}},"type":"if","locations":[{"start":{"line":16,"column":12},"end":{"line":18,"column":13}},{"start":{"line":16,"column":12},"end":{"line":18,"column":13}}],"line":16},"4":{"loc":{"start":{"line":16,"column":16},"end":{"line":16,"column":114}},"type":"binary-expr","locations":[{"start":{"line":16,"column":16},"end":{"line":16,"column":64}},{"start":{"line":16,"column":68},"end":{"line":16,"column":114}}],"line":16},"5":{"loc":{"start":{"line":37,"column":12},"end":{"line":40,"column":13}},"type":"if","locations":[{"start":{"line":37,"column":12},"end":{"line":40,"column":13}},{"start":{"line":37,"column":12},"end":{"line":40,"column":13}}],"line":37},"6":{"loc":{"start":{"line":44,"column":16},"end":{"line":45,"column":29}},"type":"if","locations":[{"start":{"line":44,"column":16},"end":{"line":45,"column":29}},{"start":{"line":44,"column":16},"end":{"line":45,"column":29}}],"line":44},"7":{"loc":{"start":{"line":50,"column":12},"end":{"line":52,"column":13}},"type":"if","locations":[{"start":{"line":50,"column":12},"end":{"line":52,"column":13}},{"start":{"line":50,"column":12},"end":{"line":52,"column":13}}],"line":50},"8":{"loc":{"start":{"line":60,"column":12},"end":{"line":63,"column":13}},"type":"if","locations":[{"start":{"line":60,"column":12},"end":{"line":63,"column":13}},{"start":{"line":60,"column":12},"end":{"line":63,"column":13}}],"line":60},"9":{"loc":{"start":{"line":66,"column":16},"end":{"line":67,"column":29}},"type":"if","locations":[{"start":{"line":66,"column":16},"end":{"line":67,"column":29}},{"start":{"line":66,"column":16},"end":{"line":67,"column":29}}],"line":66},"10":{"loc":{"start":{"line":76,"column":8},"end":{"line":77,"column":27}},"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":77,"column":27}},{"start":{"line":76,"column":8},"end":{"line":77,"column":27}}],"line":76}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":38,"6":38,"7":38,"8":38,"9":38,"10":100,"11":100,"12":1,"13":99,"14":99,"15":37,"16":37,"17":37,"18":37,"19":37,"20":37,"21":135,"22":135,"23":135,"24":4,"25":4,"26":131,"27":131,"28":131,"29":196,"30":98,"31":98,"32":98,"33":98,"34":131,"35":62,"36":131,"37":37,"38":37,"39":37,"40":135,"41":135,"42":135,"43":4,"44":4,"45":131,"46":131,"47":196,"48":98,"49":98,"50":98,"51":131,"52":37,"53":394,"54":300,"55":394,"56":100,"57":100,"58":100,"59":100,"60":1},"f":{"0":2,"1":38,"2":37,"3":394,"4":100},"b":{"0":[1,1,1],"1":[2,0],"2":[2,2],"3":[1,99],"4":[100,99],"5":[4,131],"6":[98,98],"7":[62,69],"8":[4,131],"9":[98,98],"10":[300,94]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/query-chain/QueryChainBuilder.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/query-chain/QueryChainBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import QueryChain from \"./QueryChain\";\r\nimport IQueryChainRelation from \"./IQueryChainRelation\";\r\nimport QueryChainException from \"../exception/QueryChainException\";\r\n\r\ntype IQueryChainRelationMap = { [key: string]: { [key: string]: IQueryChainRelation } };\r\n\r\nclass QueryChainBuilder {\r\n    private target: string = '';\r\n    private completeRelationMap: IQueryChainRelationMap = {};\r\n\r\n    constructor(target: string, associationTables: string[], relations: string[]) {\r\n        this.target = target.split('.')[0];\r\n        let definedTables: string[] = [this.target, ...associationTables];\r\n        for (const relation of relations) {\r\n            const tableRelation: IQueryChainRelation = this.extractRelation(relation);\r\n            if (!definedTables.includes(tableRelation.fromTable) || !definedTables.includes(tableRelation.toTable)) {\r\n                throw new QueryChainException(`${relation} using undefined table`);\r\n            }\r\n            this.safeMapAssign(this.completeRelationMap, tableRelation.fromTable, tableRelation.toTable, tableRelation);\r\n            this.safeMapAssign(\r\n                this.completeRelationMap,\r\n                tableRelation.toTable,\r\n                tableRelation.fromTable,\r\n                {\r\n                    fromTable: tableRelation.toTable,\r\n                    fromField: tableRelation.toField,\r\n                    toTable: tableRelation.fromTable,\r\n                    toField: tableRelation.fromField\r\n                });\r\n        }\r\n    }\r\n\r\n    public build(): QueryChain {\r\n        const forwardRelationMap: IQueryChainRelationMap = {};\r\n        const backwardRelationMap: IQueryChainRelationMap = {};\r\n        let trackingTable: string[] = [this.target];\r\n        let visitedTable: string[] = [];\r\n        const endNode: Set<string> = new Set();\r\n        while (trackingTable.length !== 0) {\r\n            const table: string = trackingTable.shift()!;\r\n            const relation: { [key: string]: IQueryChainRelation } = this.completeRelationMap[table];\r\n            if (relation === undefined) {\r\n                visitedTable.push(table);\r\n                continue;\r\n            }\r\n            const descendants: string[] = Object.keys(relation);\r\n            let hasNewDescendant = false;\r\n            for (const descendant of descendants) {\r\n                if (visitedTable.includes(descendant)) continue;\r\n                hasNewDescendant = true;\r\n                this.safeMapAssign(forwardRelationMap, table, descendant, relation[descendant]);\r\n                trackingTable.push(descendant);\r\n            }\r\n            if (!hasNewDescendant) {\r\n                endNode.add(table);\r\n            }\r\n            visitedTable.push(table);\r\n        }\r\n        trackingTable = [this.target];\r\n        visitedTable = [];\r\n        while (trackingTable.length !== 0) {\r\n            const table: string = trackingTable.shift()!;\r\n            const relation: { [key: string]: IQueryChainRelation } = this.completeRelationMap[table];\r\n            if (relation === undefined) {\r\n                visitedTable.push(table);\r\n                continue;\r\n            }\r\n            const descendants: string[] = Object.keys(relation);\r\n            for (const descendant of descendants) {\r\n                if (visitedTable.includes(descendant)) continue;\r\n                this.safeMapAssign(backwardRelationMap, descendant, table, this.completeRelationMap[descendant][table]);\r\n                trackingTable.push(descendant);\r\n            }\r\n            visitedTable.push(table);\r\n        }\r\n        return new QueryChain(forwardRelationMap, backwardRelationMap);\r\n    }\r\n\r\n    private safeMapAssign(map: any, key1: string, key2: string, value: any): void {\r\n        if (map[key1] === undefined) map[key1] = {};\r\n        map[key1][key2] = value;\r\n    }\r\n\r\n    private extractRelation(relation: string): IQueryChainRelation {\r\n        const side = relation.split('=');\r\n        const left = side[0].split('.');\r\n        const right = side[1].split('.');\r\n        return {\r\n            fromTable: left[0],\r\n            fromField: left[1],\r\n            toTable: right[0],\r\n            toField: right[1]\r\n        };\r\n    }\r\n}\r\n\r\nexport default QueryChainBuilder;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"35efdf68e961b76e066edff74eb6d1d5301cdf7f","contentHash":"eaa3c4d3dcf6204cb63f85b8d70556f1500f8ac0547d31a09ac9ee016e9b4e57"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\query-chain\\QueryChain.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\query-chain\\QueryChain.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":30},"end":{"line":6,"column":90}},"4":{"start":{"line":9,"column":8},"end":{"line":9,"column":53}},"5":{"start":{"line":10,"column":8},"end":{"line":10,"column":55}},"6":{"start":{"line":13,"column":29},"end":{"line":13,"column":37}},"7":{"start":{"line":14,"column":22},"end":{"line":14,"column":54}},"8":{"start":{"line":15,"column":8},"end":{"line":19,"column":9}},"9":{"start":{"line":16,"column":32},"end":{"line":16,"column":55}},"10":{"start":{"line":17,"column":12},"end":{"line":17,"column":43}},"11":{"start":{"line":18,"column":12},"end":{"line":18,"column":60}},"12":{"start":{"line":20,"column":8},"end":{"line":21,"column":26}},"13":{"start":{"line":21,"column":12},"end":{"line":21,"column":26}},"14":{"start":{"line":22,"column":8},"end":{"line":22,"column":51}},"15":{"start":{"line":23,"column":8},"end":{"line":28,"column":9}},"16":{"start":{"line":24,"column":32},"end":{"line":24,"column":55}},"17":{"start":{"line":25,"column":12},"end":{"line":26,"column":35}},"18":{"start":{"line":26,"column":16},"end":{"line":26,"column":35}},"19":{"start":{"line":27,"column":12},"end":{"line":27,"column":60}},"20":{"start":{"line":29,"column":8},"end":{"line":29,"column":96}},"21":{"start":{"line":32,"column":23},"end":{"line":32,"column":25}},"22":{"start":{"line":33,"column":8},"end":{"line":58,"column":9}},"23":{"start":{"line":34,"column":26},"end":{"line":34,"column":56}},"24":{"start":{"line":35,"column":12},"end":{"line":43,"column":13}},"25":{"start":{"line":36,"column":36},"end":{"line":36,"column":59}},"26":{"start":{"line":37,"column":16},"end":{"line":37,"column":50}},"27":{"start":{"line":38,"column":16},"end":{"line":40,"column":17}},"28":{"start":{"line":39,"column":20},"end":{"line":39,"column":34}},"29":{"start":{"line":42,"column":16},"end":{"line":42,"column":64}},"30":{"start":{"line":44,"column":12},"end":{"line":44,"column":29}},"31":{"start":{"line":47,"column":26},"end":{"line":47,"column":54}},"32":{"start":{"line":48,"column":12},"end":{"line":56,"column":13}},"33":{"start":{"line":49,"column":36},"end":{"line":49,"column":59}},"34":{"start":{"line":50,"column":16},"end":{"line":50,"column":50}},"35":{"start":{"line":51,"column":16},"end":{"line":53,"column":17}},"36":{"start":{"line":52,"column":20},"end":{"line":52,"column":44}},"37":{"start":{"line":55,"column":16},"end":{"line":55,"column":64}},"38":{"start":{"line":57,"column":12},"end":{"line":57,"column":29}},"39":{"start":{"line":61,"column":8},"end":{"line":61,"column":47}},"40":{"start":{"line":64,"column":22},"end":{"line":64,"column":54}},"41":{"start":{"line":65,"column":8},"end":{"line":70,"column":9}},"42":{"start":{"line":66,"column":32},"end":{"line":66,"column":55}},"43":{"start":{"line":67,"column":12},"end":{"line":68,"column":28}},"44":{"start":{"line":68,"column":16},"end":{"line":68,"column":28}},"45":{"start":{"line":69,"column":12},"end":{"line":69,"column":60}},"46":{"start":{"line":71,"column":8},"end":{"line":71,"column":21}},"47":{"start":{"line":74,"column":8},"end":{"line":75,"column":22}},"48":{"start":{"line":75,"column":12},"end":{"line":75,"column":22}},"49":{"start":{"line":76,"column":8},"end":{"line":76,"column":62}},"50":{"start":{"line":79,"column":8},"end":{"line":80,"column":22}},"51":{"start":{"line":80,"column":12},"end":{"line":80,"column":22}},"52":{"start":{"line":81,"column":8},"end":{"line":81,"column":63}},"53":{"start":{"line":84,"column":0},"end":{"line":84,"column":29}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":57},"end":{"line":11,"column":5}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":43},"end":{"line":30,"column":5}},"line":12},"3":{"name":"(anonymous_3)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":31},"end":{"line":59,"column":5}},"line":31},"4":{"name":"(anonymous_4)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":35},"end":{"line":62,"column":5}},"line":60},"5":{"name":"(anonymous_5)","decl":{"start":{"line":63,"column":4},"end":{"line":63,"column":5}},"loc":{"start":{"line":63,"column":31},"end":{"line":72,"column":5}},"line":63},"6":{"name":"(anonymous_6)","decl":{"start":{"line":73,"column":4},"end":{"line":73,"column":5}},"loc":{"start":{"line":73,"column":32},"end":{"line":77,"column":5}},"line":73},"7":{"name":"(anonymous_7)","decl":{"start":{"line":78,"column":4},"end":{"line":78,"column":5}},"loc":{"start":{"line":78,"column":28},"end":{"line":82,"column":5}},"line":78}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":20,"column":8},"end":{"line":21,"column":26}},"type":"if","locations":[{"start":{"line":20,"column":8},"end":{"line":21,"column":26}},{"start":{"line":20,"column":8},"end":{"line":21,"column":26}}],"line":20},"4":{"loc":{"start":{"line":25,"column":12},"end":{"line":26,"column":35}},"type":"if","locations":[{"start":{"line":25,"column":12},"end":{"line":26,"column":35}},{"start":{"line":25,"column":12},"end":{"line":26,"column":35}}],"line":25},"5":{"loc":{"start":{"line":33,"column":8},"end":{"line":58,"column":9}},"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":58,"column":9}},{"start":{"line":33,"column":8},"end":{"line":58,"column":9}}],"line":33},"6":{"loc":{"start":{"line":38,"column":16},"end":{"line":40,"column":17}},"type":"if","locations":[{"start":{"line":38,"column":16},"end":{"line":40,"column":17}},{"start":{"line":38,"column":16},"end":{"line":40,"column":17}}],"line":38},"7":{"loc":{"start":{"line":51,"column":16},"end":{"line":53,"column":17}},"type":"if","locations":[{"start":{"line":51,"column":16},"end":{"line":53,"column":17}},{"start":{"line":51,"column":16},"end":{"line":53,"column":17}}],"line":51},"8":{"loc":{"start":{"line":67,"column":12},"end":{"line":68,"column":28}},"type":"if","locations":[{"start":{"line":67,"column":12},"end":{"line":68,"column":28}},{"start":{"line":67,"column":12},"end":{"line":68,"column":28}}],"line":67},"9":{"loc":{"start":{"line":74,"column":8},"end":{"line":75,"column":22}},"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":75,"column":22}},{"start":{"line":74,"column":8},"end":{"line":75,"column":22}}],"line":74},"10":{"loc":{"start":{"line":79,"column":8},"end":{"line":80,"column":22}},"type":"if","locations":[{"start":{"line":79,"column":8},"end":{"line":80,"column":22}},{"start":{"line":79,"column":8},"end":{"line":80,"column":22}}],"line":79}},"s":{"0":1,"1":1,"2":1,"3":1,"4":37,"5":37,"6":19,"7":19,"8":19,"9":27,"10":27,"11":27,"12":19,"13":6,"14":13,"15":13,"16":13,"17":13,"18":13,"19":0,"20":0,"21":42,"22":42,"23":40,"24":40,"25":55,"26":55,"27":55,"28":40,"29":15,"30":0,"31":2,"32":2,"33":2,"34":2,"35":2,"36":1,"37":1,"38":1,"39":48,"40":68,"41":68,"42":97,"43":97,"44":60,"45":37,"46":8,"47":3,"48":1,"49":2,"50":3,"51":1,"52":2,"53":1},"f":{"0":1,"1":37,"2":19,"3":42,"4":48,"5":68,"6":3,"7":3},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[6,13],"4":[13,0],"5":[40,2],"6":[40,15],"7":[1,1],"8":[60,37],"9":[1,2],"10":[1,2]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/query-chain/QueryChain.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/query-chain/QueryChain.ts"],"names":[],"mappings":"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","sourcesContent":["import IQueryChainRelation from \"./IQueryChainRelation\";\r\nimport QueryChainException from \"../exception/QueryChainException\";\r\n\r\ntype IQueryChainRelationMap = { [key: string]: { [key: string]: IQueryChainRelation } };\r\n\r\nclass QueryChain {\r\n    public readonly forwardRelationMap: IQueryChainRelationMap;\r\n    public readonly backwardRelationMap: IQueryChainRelationMap;\r\n\r\n    constructor(forwardRelationMap: IQueryChainRelationMap, backwardRelationMap: IQueryChainRelationMap) {\r\n        this.forwardRelationMap = forwardRelationMap;\r\n        this.backwardRelationMap = backwardRelationMap;\r\n    }\r\n\r\n    public findLowestCommonParent(table1: string, table2: string): string {\r\n        const table1ToRoot: string[] = [table1];\r\n        let parents = this.backwardRelationMap[table1];\r\n        while (parents !== undefined) {\r\n            const parentTable = Object.keys(parents)[0];\r\n            table1ToRoot.push(parentTable);\r\n            parents = this.backwardRelationMap[parentTable];\r\n        }\r\n        if (table1ToRoot.includes(table2)) return table2;\r\n        parents = this.backwardRelationMap[table2];\r\n        while (parents !== undefined) {\r\n            const parentTable = Object.keys(parents)[0];\r\n            if (table1ToRoot.includes(parentTable)) return parentTable;\r\n            parents = this.backwardRelationMap[parentTable];\r\n        }\r\n        throw new QueryChainException(`${table1} and ${table2} has no common parent`);\r\n    }\r\n\r\n    public findRelationPath(from: string, to: string): IQueryChainRelation[] | undefined {\r\n        const result: IQueryChainRelation[] = [];\r\n        if (this.isDescendantOf(from, to)) {\r\n            let parents = this.backwardRelationMap[from];\r\n            while (parents !== undefined) {\r\n                const parentTable = Object.keys(parents)[0];\r\n                result.push(parents[parentTable]);\r\n                if (parentTable === to) {\r\n                    return result;\r\n                };\r\n                parents = this.backwardRelationMap[parentTable];\r\n            }\r\n            return undefined;\r\n        } else {\r\n            let parents = this.backwardRelationMap[to];\r\n            while (parents !== undefined) {\r\n                const parentTable = Object.keys(parents)[0];\r\n                result.push(parents[parentTable]);\r\n                if (parentTable === from) {\r\n                    return result.reverse();\r\n                };\r\n                parents = this.backwardRelationMap[parentTable];\r\n            }\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    public isDescendantOf(table1: string, table2: string): boolean {\r\n        return this.isParentOf(table2, table1);\r\n    }\r\n\r\n    public isParentOf(table1: string, table2: string): boolean {\r\n        let parents = this.backwardRelationMap[table2];\r\n        while (parents !== undefined) {\r\n            const parentTable = Object.keys(parents)[0];\r\n            if (parentTable === table1) return true;\r\n            parents = this.backwardRelationMap[parentTable];\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public getDirectDescendant(target: string): IQueryChainRelation[] {\r\n        if (this.forwardRelationMap[target] === undefined) return [];\r\n        return Object.values(this.forwardRelationMap[target]);\r\n    }\r\n\r\n    public getDirectParent(target: string): IQueryChainRelation[] {\r\n        if (this.backwardRelationMap[target] === undefined) return [];\r\n        return Object.values(this.backwardRelationMap[target]);\r\n    }\r\n}\r\n\r\nexport default QueryChain;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"901f11f27426533ebb3f925e508338097fc87c5b","contentHash":"e6873c337dccf016279a1dd58926d627f551ed6666f15d838cd80ea732d8e2b6"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\exception\\QueryChainException.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\exception\\QueryChainException.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":5,"column":8},"end":{"line":5,"column":23}},"2":{"start":{"line":6,"column":8},"end":{"line":6,"column":31}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":4},"end":{"line":4,"column":5}},"loc":{"start":{"line":4,"column":25},"end":{"line":7,"column":5}},"line":4}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1},"f":{"0":1},"b":{},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/exception/QueryChainException.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/exception/QueryChainException.ts"],"names":[],"mappings":";;AAAA,MAAqB,mBAAoB,SAAQ,KAAK;IAGlD,YAAY,OAAe;QACvB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;CACJ;AAPD,sCAOC","sourcesContent":["export default class QueryChainException extends Error {\r\n    public readonly message: string;\r\n\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.message = message;\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f593bbdc5528ee921cc908be5ed3f22b536621ab","contentHash":"c43d73928880a67e5fc7635096d0f183ddccc16636f6c539bafc405dff19a091"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\relation-expand\\RelationExpander.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\relation-expand\\RelationExpander.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":23},"end":{"line":6,"column":82}},"4":{"start":{"line":7,"column":24},"end":{"line":7,"column":84}},"5":{"start":{"line":8,"column":27},"end":{"line":8,"column":90}},"6":{"start":{"line":9,"column":29},"end":{"line":9,"column":94}},"7":{"start":{"line":10,"column":36},"end":{"line":10,"column":102}},"8":{"start":{"line":13,"column":8},"end":{"line":13,"column":31}},"9":{"start":{"line":14,"column":8},"end":{"line":14,"column":38}},"10":{"start":{"line":15,"column":8},"end":{"line":15,"column":46}},"11":{"start":{"line":18,"column":8},"end":{"line":18,"column":43}},"12":{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},"13":{"start":{"line":20,"column":12},"end":{"line":20,"column":68}},"14":{"start":{"line":22,"column":8},"end":{"line":22,"column":33}},"15":{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},"16":{"start":{"line":26,"column":12},"end":{"line":26,"column":19}},"17":{"start":{"line":28,"column":8},"end":{"line":38,"column":9}},"18":{"start":{"line":29,"column":33},"end":{"line":29,"column":93}},"19":{"start":{"line":30,"column":12},"end":{"line":34,"column":13}},"20":{"start":{"line":31,"column":37},"end":{"line":31,"column":123}},"21":{"start":{"line":32,"column":16},"end":{"line":32,"column":63}},"22":{"start":{"line":33,"column":16},"end":{"line":33,"column":52}},"23":{"start":{"line":37,"column":12},"end":{"line":37,"column":109}},"24":{"start":{"line":41,"column":25},"end":{"line":41,"column":45}},"25":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"26":{"start":{"line":43,"column":12},"end":{"line":43,"column":34}},"27":{"start":{"line":45,"column":8},"end":{"line":53,"column":9}},"28":{"start":{"line":46,"column":12},"end":{"line":47,"column":45}},"29":{"start":{"line":47,"column":16},"end":{"line":47,"column":45}},"30":{"start":{"line":48,"column":29},"end":{"line":48,"column":86}},"31":{"start":{"line":49,"column":12},"end":{"line":49,"column":30}},"32":{"start":{"line":50,"column":12},"end":{"line":50,"column":53}},"33":{"start":{"line":51,"column":12},"end":{"line":51,"column":55}},"34":{"start":{"line":52,"column":12},"end":{"line":52,"column":41}},"35":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"36":{"start":{"line":57,"column":12},"end":{"line":57,"column":85}},"37":{"start":{"line":59,"column":29},"end":{"line":59,"column":86}},"38":{"start":{"line":60,"column":8},"end":{"line":60,"column":52}},"39":{"start":{"line":61,"column":8},"end":{"line":61,"column":55}},"40":{"start":{"line":62,"column":30},"end":{"line":62,"column":88}},"41":{"start":{"line":63,"column":8},"end":{"line":63,"column":54}},"42":{"start":{"line":64,"column":8},"end":{"line":64,"column":57}},"43":{"start":{"line":65,"column":8},"end":{"line":66,"column":39}},"44":{"start":{"line":66,"column":12},"end":{"line":66,"column":39}},"45":{"start":{"line":67,"column":29},"end":{"line":67,"column":111}},"46":{"start":{"line":68,"column":8},"end":{"line":75,"column":9}},"47":{"start":{"line":69,"column":33},"end":{"line":69,"column":101}},"48":{"start":{"line":70,"column":12},"end":{"line":74,"column":13}},"49":{"start":{"line":71,"column":37},"end":{"line":71,"column":123}},"50":{"start":{"line":72,"column":16},"end":{"line":72,"column":60}},"51":{"start":{"line":73,"column":16},"end":{"line":73,"column":51}},"52":{"start":{"line":76,"column":8},"end":{"line":83,"column":9}},"53":{"start":{"line":77,"column":33},"end":{"line":77,"column":102}},"54":{"start":{"line":78,"column":12},"end":{"line":82,"column":13}},"55":{"start":{"line":79,"column":37},"end":{"line":79,"column":123}},"56":{"start":{"line":80,"column":16},"end":{"line":80,"column":61}},"57":{"start":{"line":81,"column":16},"end":{"line":81,"column":52}},"58":{"start":{"line":84,"column":8},"end":{"line":84,"column":28}},"59":{"start":{"line":87,"column":8},"end":{"line":87,"column":36}},"60":{"start":{"line":90,"column":0},"end":{"line":90,"column":35}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":44},"end":{"line":16,"column":5}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":13},"end":{"line":23,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":21},"end":{"line":39,"column":5}},"line":24},"4":{"name":"(anonymous_4)","decl":{"start":{"line":40,"column":4},"end":{"line":40,"column":5}},"loc":{"start":{"line":40,"column":14},"end":{"line":85,"column":5}},"line":40},"5":{"name":"(anonymous_5)","decl":{"start":{"line":86,"column":4},"end":{"line":86,"column":5}},"loc":{"start":{"line":86,"column":16},"end":{"line":88,"column":5}},"line":86}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},"type":"if","locations":[{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},{"start":{"line":19,"column":8},"end":{"line":21,"column":9}}],"line":19},"4":{"loc":{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},"type":"if","locations":[{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},{"start":{"line":25,"column":8},"end":{"line":27,"column":9}}],"line":25},"5":{"loc":{"start":{"line":28,"column":8},"end":{"line":38,"column":9}},"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":38,"column":9}},{"start":{"line":28,"column":8},"end":{"line":38,"column":9}}],"line":28},"6":{"loc":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},{"start":{"line":42,"column":8},"end":{"line":44,"column":9}}],"line":42},"7":{"loc":{"start":{"line":45,"column":8},"end":{"line":53,"column":9}},"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":53,"column":9}},{"start":{"line":45,"column":8},"end":{"line":53,"column":9}}],"line":45},"8":{"loc":{"start":{"line":46,"column":12},"end":{"line":47,"column":45}},"type":"if","locations":[{"start":{"line":46,"column":12},"end":{"line":47,"column":45}},{"start":{"line":46,"column":12},"end":{"line":47,"column":45}}],"line":46},"9":{"loc":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},{"start":{"line":56,"column":8},"end":{"line":58,"column":9}}],"line":56},"10":{"loc":{"start":{"line":56,"column":12},"end":{"line":56,"column":79}},"type":"binary-expr","locations":[{"start":{"line":56,"column":12},"end":{"line":56,"column":43}},{"start":{"line":56,"column":47},"end":{"line":56,"column":79}}],"line":56},"11":{"loc":{"start":{"line":65,"column":8},"end":{"line":66,"column":39}},"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":66,"column":39}},{"start":{"line":65,"column":8},"end":{"line":66,"column":39}}],"line":65},"12":{"loc":{"start":{"line":68,"column":8},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":75,"column":9}},{"start":{"line":68,"column":8},"end":{"line":75,"column":9}}],"line":68},"13":{"loc":{"start":{"line":76,"column":8},"end":{"line":83,"column":9}},"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":83,"column":9}},{"start":{"line":76,"column":8},"end":{"line":83,"column":9}}],"line":76}},"s":{"0":1,"1":5,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":96,"9":96,"10":96,"11":96,"12":96,"13":22,"14":96,"15":23,"16":9,"17":14,"18":14,"19":14,"20":25,"21":25,"22":25,"23":0,"24":96,"25":96,"26":45,"27":51,"28":29,"29":6,"30":23,"31":23,"32":23,"33":23,"34":23,"35":22,"36":0,"37":22,"38":22,"39":22,"40":22,"41":22,"42":22,"43":22,"44":6,"45":16,"46":16,"47":12,"48":12,"49":12,"50":12,"51":12,"52":16,"53":13,"54":13,"55":16,"56":16,"57":16,"58":16,"59":96,"60":1},"f":{"0":5,"1":96,"2":96,"3":23,"4":96,"5":96},"b":{"0":[1,1,1],"1":[5,0],"2":[5,5],"3":[22,74],"4":[9,14],"5":[14,0],"6":[45,51],"7":[29,22],"8":[6,23],"9":[0,22],"10":[22,22],"11":[6,16],"12":[12,4],"13":[13,3]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/relation-expand/RelationExpander.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/relation-expand/RelationExpander.ts"],"names":[],"mappings":"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","sourcesContent":["import QueryChain from \"../query-chain/QueryChain\";\r\nimport RelationNode from \"../expression-tree/RelationNode\";\r\nimport ConditionNode from \"../expression-tree/ConditionNode\";\r\nimport OutputTargetNode from \"../expression-tree/OutputTargetNode\";\r\nimport IQueryChainRelation from \"../query-chain/IQueryChainRelation\";\r\nimport BinaryOperatorNode from \"../expression-tree/BinaryOperatorNode\";\r\nimport IExpressionTreeNode from \"../expression-tree/ExpressionTreeNode\";\r\nimport RelationExpanderException from \"../exception/RelationExpanderException\";\r\n\r\nclass RelationExpander {\r\n    private _queryChain: QueryChain;\r\n    private _resultTable: string = '';\r\n    private _expressionTree: IExpressionTreeNode;\r\n\r\n    constructor(expressionTree: IExpressionTreeNode, queryChain: QueryChain) {\r\n        this._queryChain = queryChain;\r\n        this._expressionTree = expressionTree;\r\n    }\r\n\r\n    public expand(): string {\r\n        this._resultTable = this._expand();\r\n        if (this._expressionTree instanceof BinaryOperatorNode) {\r\n            (this._expressionTree as BinaryOperatorNode).setOutputTarget(this._resultTable);\r\n        }\r\n        return this._resultTable;\r\n    }\r\n\r\n    private finalize(target: string): void {\r\n        if (target === this._resultTable) {\r\n            return;\r\n        }\r\n\r\n        if (this._queryChain.isParentOf(target, this._resultTable)) {\r\n            const relationPath: IQueryChainRelation[] = this._queryChain.findRelationPath(this._resultTable, target)!;\r\n            for (const path of relationPath) {\r\n                const relationNode = new RelationNode(path.fromTable, path.fromField, path.toTable, path.toField);\r\n                relationNode.setLeftNode(this._expressionTree);\r\n                this._expressionTree = relationNode;\r\n            }\r\n        } else {\r\n            throw new RelationExpanderException(`${target} is not parent of ${this._resultTable}`);\r\n        }\r\n    }\r\n\r\n    private _expand(): string {\r\n        const rootNode = this._expressionTree;\r\n        if (rootNode instanceof ConditionNode) {\r\n            return (rootNode as ConditionNode).table;\r\n        }\r\n\r\n        if (rootNode instanceof OutputTargetNode) {\r\n            if (rootNode.leftNode === undefined) return rootNode.outputTarget;\r\n            const expander = new RelationExpander(rootNode.leftNode!, this._queryChain);\r\n            expander.expand();\r\n            expander.finalize(rootNode.outputTarget);\r\n            rootNode.setLeftNode(expander.getResult());\r\n            return rootNode.outputTarget;\r\n        }\r\n\r\n        let leftNodeResultTable: string;\r\n        let rightNodeResultTable: string;\r\n\r\n        if (rootNode.leftNode === undefined || rootNode.rightNode === undefined) {\r\n            throw new RelationExpanderException('Invalid expression tree');\r\n        }\r\n\r\n        const leftExpander = new RelationExpander(rootNode.leftNode, this._queryChain);\r\n        leftNodeResultTable = leftExpander.expand();\r\n        rootNode.setLeftNode(leftExpander.getResult());\r\n\r\n        const rightExpander = new RelationExpander(rootNode.rightNode!, this._queryChain);\r\n        rightNodeResultTable = rightExpander.expand();\r\n        rootNode.setRightNode(rightExpander.getResult());\r\n\r\n        if (leftNodeResultTable === rightNodeResultTable) return leftNodeResultTable;\r\n\r\n        const commonParent: string = this._queryChain.findLowestCommonParent(rightNodeResultTable, leftNodeResultTable);\r\n\r\n        if (leftNodeResultTable !== commonParent) {\r\n            const relationPath: IQueryChainRelation[] = this._queryChain.findRelationPath(leftNodeResultTable, commonParent)!;\r\n            for (const path of relationPath) {\r\n                const relationNode = new RelationNode(path.fromTable, path.fromField, path.toTable, path.toField);\r\n                relationNode.setLeftNode(rootNode.leftNode);\r\n                rootNode.setLeftNode(relationNode);\r\n            }\r\n        }\r\n\r\n        if (rightNodeResultTable !== commonParent) {\r\n            const relationPath: IQueryChainRelation[] = this._queryChain.findRelationPath(rightNodeResultTable, commonParent)!;\r\n            for (const path of relationPath) {\r\n                const relationNode = new RelationNode(path.fromTable, path.fromField, path.toTable, path.toField);\r\n                relationNode.setLeftNode(rootNode.rightNode);\r\n                rootNode.setRightNode(relationNode);\r\n            }\r\n        }\r\n\r\n        return commonParent;\r\n    }\r\n\r\n    public getResult(): IExpressionTreeNode {\r\n        return this._expressionTree;\r\n    }\r\n}\r\n\r\nexport default RelationExpander;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"03fb72b3d535f8a95fe339fe912d679452d19027","contentHash":"3baa48fe8679a04377f9b84f31199baa06297d8addf54aa2d0e81af601b26eea"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\expression-tree\\RelationNode.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\expression-tree\\RelationNode.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":29},"end":{"line":6,"column":77}},"4":{"start":{"line":9,"column":8},"end":{"line":9,"column":16}},"5":{"start":{"line":10,"column":8},"end":{"line":10,"column":31}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":31}},"7":{"start":{"line":12,"column":8},"end":{"line":12,"column":35}},"8":{"start":{"line":13,"column":8},"end":{"line":13,"column":35}},"9":{"start":{"line":16,"column":8},"end":{"line":16,"column":30}},"10":{"start":{"line":19,"column":0},"end":{"line":19,"column":31}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":56},"end":{"line":14,"column":5}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":22},"end":{"line":17,"column":5}},"line":15}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":53,"5":53,"6":53,"7":53,"8":53,"9":53,"10":1},"f":{"0":1,"1":53,"2":53},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/expression-tree/RelationNode.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/expression-tree/RelationNode.ts"],"names":[],"mappings":";;;;;AAAA,8EAAuD;AAEvD,MAAM,YAAa,SAAQ,4BAAmB;IAM1C,YAAY,SAAiB,EAAE,SAAiB,EAAE,OAAe,EAAE,OAAe;QAC9E,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAEM,WAAW,CAAC,IAAyB;QACxC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,CAAC;CACJ;AAED,kBAAe,YAAY,CAAC","sourcesContent":["import IExpressionTreeNode from \"./ExpressionTreeNode\";\r\n\r\nclass RelationNode extends IExpressionTreeNode {\r\n    public readonly toTable: string;\r\n    public readonly toField: string;\r\n    public readonly fromTable: string;\r\n    public readonly fromField: string;\r\n\r\n    constructor(fromTable: string, fromField: string, toTable: string, toField: string) {\r\n        super();\r\n        this.toTable = toTable;\r\n        this.toField = toField;\r\n        this.fromTable = fromTable;\r\n        this.fromField = fromField;\r\n    }\r\n\r\n    public setLeftNode(node: IExpressionTreeNode): void {\r\n        this._leftNode = node;\r\n    }\r\n}\r\n\r\nexport default RelationNode;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4639cf8406ffdf7809138f394406a0898a69d994","contentHash":"3fd66f79d4f237fe43de61870d0c6c3d6de39d4ad6eeaabc1e1efaded07f8fa3"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\expression-tree\\ExpressionTreeNode.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\expression-tree\\ExpressionTreeNode.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":40},"end":{"line":6,"column":110}},"4":{"start":{"line":9,"column":8},"end":{"line":9,"column":60}},"5":{"start":{"line":12,"column":8},"end":{"line":12,"column":60}},"6":{"start":{"line":15,"column":8},"end":{"line":15,"column":30}},"7":{"start":{"line":18,"column":8},"end":{"line":18,"column":31}},"8":{"start":{"line":21,"column":0},"end":{"line":21,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":22},"end":{"line":10,"column":5}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":23},"end":{"line":13,"column":5}},"line":11},"3":{"name":"(anonymous_3)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":19},"end":{"line":16,"column":5}},"line":14},"4":{"name":"(anonymous_4)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":20},"end":{"line":19,"column":5}},"line":17}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":0,"5":0,"6":222,"7":113,"8":1},"f":{"0":1,"1":0,"2":0,"3":222,"4":113},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/expression-tree/ExpressionTreeNode.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/expression-tree/ExpressionTreeNode.ts"],"names":[],"mappings":";;;;;AAAA,+GAAuF;AAEvF,MAAM,mBAAmB;IAId,WAAW,CAAC,IAAyB;QACxC,MAAM,IAAI,uCAA6B,EAAE,CAAC;IAC9C,CAAC;IAEM,YAAY,CAAC,IAAyB;QACzC,MAAM,IAAI,uCAA6B,EAAE,CAAC;IAC9C,CAAC;IAED,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;CACJ;AAED,kBAAe,mBAAmB,CAAC","sourcesContent":["import UnsupportedOperationException from \"../exception/UnsupportedOperationException\";\r\n\r\nclass IExpressionTreeNode {\r\n    protected _leftNode?: IExpressionTreeNode;\r\n    protected _rightNode?: IExpressionTreeNode;\r\n\r\n    public setLeftNode(node: IExpressionTreeNode): void {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    public setRightNode(node: IExpressionTreeNode): void {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    public get leftNode(): IExpressionTreeNode | undefined {\r\n        return this._leftNode;\r\n    }\r\n\r\n    public get rightNode(): IExpressionTreeNode | undefined {\r\n        return this._rightNode;\r\n    }\r\n}\r\n\r\nexport default IExpressionTreeNode;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"68c995354e8af9408fb1a46aff991fa4b46c181d","contentHash":"5785ac92c32bac3466b846e9281cc02fae2ccee582c37d453dccd661ed1692ef"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\exception\\UnsupportedOperationException.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\exception\\UnsupportedOperationException.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":5,"column":8},"end":{"line":5,"column":23}},"2":{"start":{"line":6,"column":8},"end":{"line":6,"column":31}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":48}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":4},"end":{"line":4,"column":5}},"loc":{"start":{"line":4,"column":51},"end":{"line":7,"column":5}},"line":4}},"branchMap":{"0":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":49}},"type":"default-arg","locations":[{"start":{"line":4,"column":26},"end":{"line":4,"column":49}}],"line":4}},"s":{"0":1,"1":0,"2":0,"3":1},"f":{"0":0},"b":{"0":[0]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/exception/UnsupportedOperationException.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/exception/UnsupportedOperationException.ts"],"names":[],"mappings":";;AAAA,MAAqB,6BAA8B,SAAQ,KAAK;IAG5D,YAAY,UAAkB,uBAAuB;QACjD,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;CACJ;AAPD,gDAOC","sourcesContent":["export default class UnsupportedOperationException extends Error {\r\n    public readonly message: string;\r\n\r\n    constructor(message: string = 'unsupported operation') {\r\n        super(message);\r\n        this.message = message;\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"67a0055a338e8c5c85136d699efb5a2f3197edfa","contentHash":"8c790c904f560a31b37decb0066546398e04a86831986c697ebfbc907d7f1d7e"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\expression-tree\\ConditionNode.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\expression-tree\\ConditionNode.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":39},"end":{"line":6,"column":108}},"4":{"start":{"line":7,"column":29},"end":{"line":7,"column":77}},"5":{"start":{"line":10,"column":8},"end":{"line":10,"column":16}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":41}},"7":{"start":{"line":12,"column":22},"end":{"line":12,"column":163}},"8":{"start":{"line":13,"column":31},"end":{"line":13,"column":60}},"9":{"start":{"line":14,"column":8},"end":{"line":15,"column":95}},"10":{"start":{"line":15,"column":12},"end":{"line":15,"column":95}},"11":{"start":{"line":16,"column":8},"end":{"line":16,"column":39}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":39}},"13":{"start":{"line":18,"column":8},"end":{"line":18,"column":42}},"14":{"start":{"line":19,"column":8},"end":{"line":19,"column":45}},"15":{"start":{"line":20,"column":8},"end":{"line":20,"column":45}},"16":{"start":{"line":21,"column":8},"end":{"line":21,"column":48}},"17":{"start":{"line":24,"column":22},"end":{"line":24,"column":237}},"18":{"start":{"line":25,"column":8},"end":{"line":25,"column":31}},"19":{"start":{"line":28,"column":0},"end":{"line":28,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":30},"end":{"line":22,"column":5}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":33},"end":{"line":26,"column":5}},"line":23}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":14,"column":8},"end":{"line":15,"column":95}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":15,"column":95}},{"start":{"line":14,"column":8},"end":{"line":15,"column":95}}],"line":14}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":77,"6":77,"7":77,"8":77,"9":77,"10":0,"11":77,"12":77,"13":77,"14":77,"15":77,"16":77,"17":97,"18":97,"19":1},"f":{"0":2,"1":77,"2":97},"b":{"0":[1,1,1],"1":[2,0],"2":[2,2],"3":[0,77]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/expression-tree/ConditionNode.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/expression-tree/ConditionNode.ts"],"names":[],"mappings":";;;;;AAAA,6GAAqF;AAErF,8EAAuD;AAKvD,MAAM,aAAc,SAAQ,4BAAmB;IAS3C,YAAY,YAAoB;QAC5B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,MAAM,KAAK,GAAW,6IAA6I,CAAC;QACpK,MAAM,cAAc,GAA2B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC7E,IAAI,cAAc,KAAK,IAAI;YAAE,MAAM,IAAI,sCAA4B,CAAC,gCAAgC,CAAC,CAAC;QACtG,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,CAAC,CAA6B,CAAC;QAC9D,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC,CAAC,CAAgB,CAAC;QACpD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC;IAEM,MAAM,CAAC,gBAAgB,CAAC,GAAW;QACtC,MAAM,KAAK,GAAW,uNAAuN,CAAC;QAC9O,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;CACJ;AAED,kBAAe,aAAa,CAAC","sourcesContent":["import ExpressionTreeBuildException from \"../exception/ExpressionTreeBuildException\";\r\nimport ExpressionTreeBuilder from \"./ExpressionTreeBuilder\";\r\nimport IExpressionTreeNode from \"./ExpressionTreeNode\";\r\n\r\ntype ModifierOp = '&' | '|' | '+' | '-' | '*' | '/';\r\ntype ConditionOp = '=' | '!=' | '<' | '<=' | '>' | '>=' | 'LIKE' | 'IS NULL' | 'IS NOT NULL' | 'IN';\r\n\r\nclass ConditionNode extends IExpressionTreeNode {\r\n    public readonly conditionStr: string;\r\n    public readonly table: string;\r\n    public readonly field: string;\r\n    public readonly modifier?: ModifierOp;\r\n    public readonly modifyValue?: string;\r\n    public readonly conditionOp: ConditionOp;\r\n    public readonly conditionValue?: string;\r\n\r\n    constructor(conditionStr: string) {\r\n        super();\r\n        this.conditionStr = conditionStr;\r\n        const regex: RegExp = /[\\(]?\\s*([\\d\\w]*)\\.([\\d\\w]*)\\s*([\\&\\|\\+\\-\\*\\/])?\\s*([\\\"\\d\\w]*)?\\s*[\\)]?\\s*(=|!=|<|<=|>|>=|LIKE|NOT IN|IN|IS NULL|IS NOT NULL)\\s*([^\\s]+)*|/g;\r\n        const capturedGroups: RegExpExecArray | null = regex.exec(this.conditionStr);\r\n        if (capturedGroups === null) throw new ExpressionTreeBuildException('Condition info format mismatch');\r\n        this.table = capturedGroups[1];\r\n        this.field = capturedGroups[2];\r\n        this.modifier = capturedGroups[3] as (ModifierOp | undefined);\r\n        this.modifyValue = capturedGroups[4];\r\n        this.conditionOp = capturedGroups[5] as ConditionOp;\r\n        this.conditionValue = capturedGroups[6];\r\n    }\r\n\r\n    public static isValidCondition(str: string): boolean {\r\n        const regex: RegExp = /[\\(]?\\s*([\\d\\w]*)\\.([\\d\\w]*)\\s*([\\&\\|\\+\\-\\*\\/])?\\s*([\\\"\\d\\w]*)?\\s*[\\)]?\\s*(=|!=|<|<=|>|>=|LIKE|NOT IN|IN)\\s*([^\\s]+)|[\\(]?\\s*([\\d\\w]*)\\.([\\d\\w]*)\\s*([\\&\\|\\+\\-\\*\\/])?\\s*([\\\"\\d\\w]*)?\\s*[\\)]?\\s*(IS NULL|IS NOT NULL)/g;\r\n        return regex.test(str);\r\n    }\r\n}\r\n\r\nexport default ConditionNode;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"85891ecdb80b57b3c5ecc91d708add5380b7598b","contentHash":"c3c536d3a2088977ba6db1493ca69d2c82a66b8538a1878153185cbc7aa6e582"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\exception\\ExpressionTreeBuildException.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\exception\\ExpressionTreeBuildException.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":5,"column":8},"end":{"line":5,"column":23}},"2":{"start":{"line":6,"column":8},"end":{"line":6,"column":31}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":47}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":4},"end":{"line":4,"column":5}},"loc":{"start":{"line":4,"column":25},"end":{"line":7,"column":5}},"line":4}},"branchMap":{},"s":{"0":1,"1":0,"2":0,"3":1},"f":{"0":0},"b":{},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/exception/ExpressionTreeBuildException.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/exception/ExpressionTreeBuildException.ts"],"names":[],"mappings":";;AAAA,MAAqB,4BAA6B,SAAQ,KAAK;IAG3D,YAAY,OAAe;QACvB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;CACJ;AAPD,+CAOC","sourcesContent":["export default class ExpressionTreeBuildException extends Error {\r\n    public readonly message: string;\r\n\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.message = message;\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9627d8558acc018951217a2ed680d116bd2e8a60","contentHash":"78ccfd88bf10e07e3b16187b4c4c0c5256f7e94c25972f2449f916ad101deac9"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\expression-tree\\OutputTargetNode.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\expression-tree\\OutputTargetNode.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":29},"end":{"line":6,"column":77}},"4":{"start":{"line":9,"column":8},"end":{"line":9,"column":16}},"5":{"start":{"line":10,"column":8},"end":{"line":10,"column":41}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":31}},"7":{"start":{"line":12,"column":8},"end":{"line":12,"column":27}},"8":{"start":{"line":15,"column":8},"end":{"line":15,"column":30}},"9":{"start":{"line":18,"column":0},"end":{"line":18,"column":35}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":46},"end":{"line":13,"column":5}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":22},"end":{"line":16,"column":5}},"line":14}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":34,"5":34,"6":34,"7":34,"8":57,"9":1},"f":{"0":1,"1":34,"2":57},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/expression-tree/OutputTargetNode.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/expression-tree/OutputTargetNode.ts"],"names":[],"mappings":";;;;;AAAA,8EAAuD;AAEvD,MAAM,gBAAiB,SAAQ,4BAAmB;IAK9C,YAAY,YAAoB,EAAE,OAAkB,EAAE,KAAgB;QAClE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAEM,WAAW,CAAC,IAA0B;QACzC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,CAAC;CACJ;AAED,kBAAe,gBAAgB,CAAC","sourcesContent":["import IExpressionTreeNode from \"./ExpressionTreeNode\";\r\n\r\nclass OutputTargetNode extends IExpressionTreeNode {\r\n    public readonly outputTarget: string;\r\n    public readonly orderBy?: string[];\r\n    public readonly limit?: number[];\r\n\r\n    constructor(outputTarget: string, orderBy?: string[], limit?: number[]) {\r\n        super();\r\n        this.outputTarget = outputTarget;\r\n        this.orderBy = orderBy;\r\n        this.limit = limit;\r\n    }\r\n\r\n    public setLeftNode(node?: IExpressionTreeNode): void {\r\n        this._leftNode = node;\r\n    }\r\n}\r\n\r\nexport default OutputTargetNode;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"175eeb30494252a2c8378f095f24f62ea5ceac3c","contentHash":"c43bdf74341356ec8d273ffb713af99359cd8827f415869b3a215a01a8b98aae"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\expression-tree\\BinaryOperatorNode.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\expression-tree\\BinaryOperatorNode.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":29},"end":{"line":6,"column":77}},"4":{"start":{"line":9,"column":8},"end":{"line":9,"column":16}},"5":{"start":{"line":10,"column":8},"end":{"line":10,"column":29}},"6":{"start":{"line":13,"column":8},"end":{"line":13,"column":34}},"7":{"start":{"line":16,"column":8},"end":{"line":16,"column":36}},"8":{"start":{"line":19,"column":8},"end":{"line":19,"column":30}},"9":{"start":{"line":22,"column":8},"end":{"line":22,"column":31}},"10":{"start":{"line":25,"column":0},"end":{"line":25,"column":37}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":24},"end":{"line":11,"column":5}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":23},"end":{"line":14,"column":5}},"line":12},"3":{"name":"(anonymous_3)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":28},"end":{"line":17,"column":5}},"line":15},"4":{"name":"(anonymous_4)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":22},"end":{"line":20,"column":5}},"line":18},"5":{"name":"(anonymous_5)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":23},"end":{"line":23,"column":5}},"line":21}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":43,"5":43,"6":28,"7":22,"8":76,"9":79,"10":1},"f":{"0":1,"1":43,"2":28,"3":22,"4":76,"5":79},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/expression-tree/BinaryOperatorNode.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/expression-tree/BinaryOperatorNode.ts"],"names":[],"mappings":";;;;;AAAA,8EAAuD;AAEvD,MAAM,kBAAmB,SAAQ,4BAAmB;IAIhD,YAAY,MAAoB;QAC5B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED,IAAW,YAAY;QACnB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAEM,eAAe,CAAC,MAAc;QACjC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;IAChC,CAAC;IAEM,WAAW,CAAC,IAAyB;QACxC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,CAAC;IAEM,YAAY,CAAC,IAAyB;QACzC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC3B,CAAC;CACJ;AAED,kBAAe,kBAAkB,CAAC","sourcesContent":["import IExpressionTreeNode from \"./ExpressionTreeNode\";\r\n\r\nclass BinaryOperatorNode extends IExpressionTreeNode {\r\n    public readonly opType: 'AND' | 'OR';\r\n    private _outputTarget: string | undefined;\r\n\r\n    constructor(opType: 'AND' | 'OR') {\r\n        super();\r\n        this.opType = opType;\r\n    }\r\n\r\n    public get outputTarget(): string | undefined {\r\n        return this._outputTarget;\r\n    }\r\n\r\n    public setOutputTarget(target: string): void {\r\n        this._outputTarget = target;\r\n    }\r\n\r\n    public setLeftNode(node: IExpressionTreeNode): void {\r\n        this._leftNode = node;\r\n    }\r\n\r\n    public setRightNode(node: IExpressionTreeNode): void {\r\n        this._rightNode = node;\r\n    }\r\n}\r\n\r\nexport default BinaryOperatorNode;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9048269e260c6c0563d442786d027f3badeb77a3","contentHash":"29861830841016b4d160247923606bf2018a1a0679a03947057473d232358137"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\exception\\RelationExpanderException.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\exception\\RelationExpanderException.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":5,"column":8},"end":{"line":5,"column":23}},"2":{"start":{"line":6,"column":8},"end":{"line":6,"column":31}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":4},"end":{"line":4,"column":5}},"loc":{"start":{"line":4,"column":25},"end":{"line":7,"column":5}},"line":4}},"branchMap":{},"s":{"0":1,"1":0,"2":0,"3":1},"f":{"0":0},"b":{},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/exception/RelationExpanderException.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/exception/RelationExpanderException.ts"],"names":[],"mappings":";;AAAA,MAAqB,yBAA0B,SAAQ,KAAK;IAGxD,YAAY,OAAe;QACvB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;CACJ;AAPD,4CAOC","sourcesContent":["export default class RelationExpanderException extends Error {\r\n    public readonly message: string;\r\n\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.message = message;\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"873ebfbcb7463f8ca3430c109a67737a7952326e","contentHash":"9c23ad7f00945df2a0e95389b1700c24b9c47092a40a1c3be4b36bdbd79f2041"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\expression-tree\\ExpressionTreeParser.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\expression-tree\\ExpressionTreeParser.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":32},"end":{"line":6,"column":83}},"4":{"start":{"line":7,"column":27},"end":{"line":7,"column":73}},"5":{"start":{"line":10,"column":22},"end":{"line":10,"column":46}},"6":{"start":{"line":11,"column":23},"end":{"line":11,"column":44}},"7":{"start":{"line":12,"column":24},"end":{"line":12,"column":61}},"8":{"start":{"line":13,"column":8},"end":{"line":33,"column":9}},"9":{"start":{"line":14,"column":12},"end":{"line":32,"column":13}},"10":{"start":{"line":16,"column":20},"end":{"line":16,"column":38}},"11":{"start":{"line":17,"column":20},"end":{"line":17,"column":26}},"12":{"start":{"line":19,"column":20},"end":{"line":19,"column":39}},"13":{"start":{"line":20,"column":20},"end":{"line":20,"column":26}},"14":{"start":{"line":22,"column":20},"end":{"line":22,"column":52}},"15":{"start":{"line":23,"column":20},"end":{"line":23,"column":26}},"16":{"start":{"line":25,"column":20},"end":{"line":25,"column":50}},"17":{"start":{"line":26,"column":20},"end":{"line":26,"column":26}},"18":{"start":{"line":28,"column":20},"end":{"line":28,"column":26}},"19":{"start":{"line":30,"column":20},"end":{"line":30,"column":50}},"20":{"start":{"line":31,"column":20},"end":{"line":31,"column":26}},"21":{"start":{"line":34,"column":27},"end":{"line":34,"column":80}},"22":{"start":{"line":35,"column":8},"end":{"line":35,"column":52}},"23":{"start":{"line":36,"column":8},"end":{"line":36,"column":26}},"24":{"start":{"line":39,"column":0},"end":{"line":39,"column":39}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":43},"end":{"line":37,"column":5}},"line":9}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":14,"column":12},"end":{"line":32,"column":13}},"type":"switch","locations":[{"start":{"line":15,"column":16},"end":{"line":17,"column":26}},{"start":{"line":18,"column":16},"end":{"line":20,"column":26}},{"start":{"line":21,"column":16},"end":{"line":23,"column":26}},{"start":{"line":24,"column":16},"end":{"line":26,"column":26}},{"start":{"line":27,"column":16},"end":{"line":28,"column":26}},{"start":{"line":29,"column":16},"end":{"line":31,"column":26}}],"line":14}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":34,"6":34,"7":34,"8":34,"9":168,"10":10,"11":10,"12":23,"13":23,"14":17,"15":17,"16":17,"17":17,"18":34,"19":67,"20":67,"21":34,"22":34,"23":34,"24":1},"f":{"0":2,"1":34},"b":{"0":[1,1,1],"1":[2,0],"2":[2,2],"3":[10,23,17,17,34,67]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/expression-tree/ExpressionTreeParser.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/expression-tree/ExpressionTreeParser.ts"],"names":[],"mappings":";;;;;AAAA,oFAA4D;AAE5D,0EAAkD;AAElD,MAAM,oBAAoB;IAEf,KAAK,CAAC,KAAa,EAAE,QAAgB,EAAE,OAAkB,EAAE,KAAgB;QAC9E,MAAM,KAAK,GAAW,wBAAwB,CAAC;QAC/C,MAAM,MAAM,GAAa,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/C,MAAM,OAAO,GAA0B,IAAI,+BAAqB,EAAE,CAAC;QACnE,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YACxB,QAAQ,KAAK,EAAE;gBACX,KAAK,IAAI;oBACL,OAAO,CAAC,OAAO,EAAE,CAAC;oBAClB,MAAM;gBACV,KAAK,KAAK;oBACN,OAAO,CAAC,QAAQ,EAAE,CAAC;oBACnB,MAAM;gBACV,KAAK,GAAG;oBACJ,OAAO,CAAC,qBAAqB,EAAE,CAAC;oBAChC,MAAM;gBACV,KAAK,GAAG;oBACJ,OAAO,CAAC,mBAAmB,EAAE,CAAC;oBAC9B,MAAM;gBACV,KAAK,EAAE;oBACH,MAAM;gBACV;oBACI,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;oBAC9B,MAAM;aACb;SACJ;QACD,MAAM,UAAU,GAAG,IAAI,0BAAgB,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QAC/D,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;QAC5C,OAAO,UAAU,CAAC;IACtB,CAAC;CACJ;AAED,kBAAe,oBAAoB,CAAC","sourcesContent":["import ExpressionTreeBuilder from \"./ExpressionTreeBuilder\";\r\nimport IExpressionTreeNode from \"./ExpressionTreeNode\";\r\nimport OutputTargetNode from \"./OutputTargetNode\";\r\n\r\nclass ExpressionTreeParser {\r\n\r\n    public parse(query: string, whereStr: string, orderBy?: string[], limit?: number[]): IExpressionTreeNode {\r\n        const regex: RegExp = /\\s*(AND|OR|\\(|\\))\\s*/gm;\r\n        const tokens: string[] = whereStr.split(regex);\r\n        const builder: ExpressionTreeBuilder = new ExpressionTreeBuilder();\r\n        for (const token of tokens) {\r\n            switch (token) {\r\n                case 'OR':\r\n                    builder.buildOr();\r\n                    break;\r\n                case 'AND':\r\n                    builder.buildAnd();\r\n                    break;\r\n                case '(':\r\n                    builder.startBuildParentheses();\r\n                    break;\r\n                case ')':\r\n                    builder.endBuildParentheses();\r\n                    break;\r\n                case '':\r\n                    break;\r\n                default:\r\n                    builder.buildCondition(token);\r\n                    break;\r\n            }\r\n        }\r\n        const outputNode = new OutputTargetNode(query, orderBy, limit);\r\n        outputNode.setLeftNode(builder.getResult());\r\n        return outputNode;\r\n    }\r\n}\r\n\r\nexport default ExpressionTreeParser;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f1f0f287e32ed5fd910fa7ec9efcce7b1f98a454","contentHash":"40ba2e71429f309ef87fb581e9689ee3ea527347678eeb46a7243bcefc046b1c"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\expression-tree\\ExpressionTreeBuilder.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\expression-tree\\ExpressionTreeBuilder.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":24},"end":{"line":6,"column":67}},"4":{"start":{"line":7,"column":29},"end":{"line":7,"column":77}},"5":{"start":{"line":8,"column":29},"end":{"line":8,"column":77}},"6":{"start":{"line":9,"column":39},"end":{"line":9,"column":108}},"7":{"start":{"line":12,"column":8},"end":{"line":12,"column":16}},"8":{"start":{"line":13,"column":8},"end":{"line":13,"column":35}},"9":{"start":{"line":20,"column":8},"end":{"line":20,"column":29}},"10":{"start":{"line":23,"column":8},"end":{"line":27,"column":9}},"11":{"start":{"line":24,"column":12},"end":{"line":24,"column":69}},"12":{"start":{"line":25,"column":12},"end":{"line":25,"column":45}},"13":{"start":{"line":26,"column":12},"end":{"line":26,"column":19}},"14":{"start":{"line":28,"column":8},"end":{"line":31,"column":9}},"15":{"start":{"line":29,"column":12},"end":{"line":29,"column":74}},"16":{"start":{"line":30,"column":12},"end":{"line":30,"column":19}},"17":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"18":{"start":{"line":33,"column":12},"end":{"line":33,"column":103}},"19":{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},"20":{"start":{"line":36,"column":12},"end":{"line":36,"column":102}},"21":{"start":{"line":38,"column":8},"end":{"line":38,"column":82}},"22":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"23":{"start":{"line":42,"column":12},"end":{"line":42,"column":96}},"24":{"start":{"line":44,"column":23},"end":{"line":44,"column":61}},"25":{"start":{"line":45,"column":8},"end":{"line":45,"column":49}},"26":{"start":{"line":46,"column":8},"end":{"line":46,"column":37}},"27":{"start":{"line":47,"column":8},"end":{"line":47,"column":41}},"28":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"29":{"start":{"line":51,"column":12},"end":{"line":51,"column":97}},"30":{"start":{"line":53,"column":24},"end":{"line":53,"column":63}},"31":{"start":{"line":54,"column":8},"end":{"line":54,"column":50}},"32":{"start":{"line":55,"column":8},"end":{"line":55,"column":39}},"33":{"start":{"line":58,"column":8},"end":{"line":61,"column":9}},"34":{"start":{"line":59,"column":12},"end":{"line":59,"column":55}},"35":{"start":{"line":60,"column":12},"end":{"line":60,"column":45}},"36":{"start":{"line":62,"column":8},"end":{"line":62,"column":58}},"37":{"start":{"line":65,"column":23},"end":{"line":65,"column":44}},"38":{"start":{"line":66,"column":8},"end":{"line":67,"column":19}},"39":{"start":{"line":67,"column":12},"end":{"line":67,"column":19}},"40":{"start":{"line":68,"column":8},"end":{"line":73,"column":9}},"41":{"start":{"line":69,"column":12},"end":{"line":69,"column":34}},"42":{"start":{"line":70,"column":12},"end":{"line":70,"column":85}},"43":{"start":{"line":71,"column":12},"end":{"line":71,"column":45}},"44":{"start":{"line":72,"column":12},"end":{"line":72,"column":19}},"45":{"start":{"line":74,"column":8},"end":{"line":75,"column":93}},"46":{"start":{"line":75,"column":12},"end":{"line":75,"column":93}},"47":{"start":{"line":76,"column":8},"end":{"line":80,"column":9}},"48":{"start":{"line":77,"column":12},"end":{"line":77,"column":56}},"49":{"start":{"line":78,"column":12},"end":{"line":78,"column":44}},"50":{"start":{"line":79,"column":12},"end":{"line":79,"column":45}},"51":{"start":{"line":83,"column":8},"end":{"line":85,"column":9}},"52":{"start":{"line":84,"column":12},"end":{"line":84,"column":19}},"53":{"start":{"line":86,"column":8},"end":{"line":90,"column":9}},"54":{"start":{"line":87,"column":29},"end":{"line":87,"column":50}},"55":{"start":{"line":88,"column":12},"end":{"line":88,"column":56}},"56":{"start":{"line":89,"column":12},"end":{"line":89,"column":44}},"57":{"start":{"line":93,"column":28},"end":{"line":93,"column":50}},"58":{"start":{"line":94,"column":8},"end":{"line":98,"column":9}},"59":{"start":{"line":95,"column":26},"end":{"line":95,"column":47}},"60":{"start":{"line":96,"column":26},"end":{"line":96,"column":47}},"61":{"start":{"line":97,"column":12},"end":{"line":97,"column":87}},"62":{"start":{"line":101,"column":8},"end":{"line":101,"column":21}},"63":{"start":{"line":102,"column":8},"end":{"line":102,"column":36}},"64":{"start":{"line":105,"column":0},"end":{"line":105,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":27},"end":{"line":14,"column":5}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":18},"end":{"line":21,"column":5}},"line":19},"3":{"name":"(anonymous_3)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":30},"end":{"line":39,"column":5}},"line":22},"4":{"name":"(anonymous_4)","decl":{"start":{"line":40,"column":4},"end":{"line":40,"column":5}},"loc":{"start":{"line":40,"column":14},"end":{"line":48,"column":5}},"line":40},"5":{"name":"(anonymous_5)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":15},"end":{"line":56,"column":5}},"line":49},"6":{"name":"(anonymous_6)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":28},"end":{"line":63,"column":5}},"line":57},"7":{"name":"(anonymous_7)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":26},"end":{"line":81,"column":5}},"line":64},"8":{"name":"(anonymous_8)","decl":{"start":{"line":82,"column":4},"end":{"line":82,"column":5}},"loc":{"start":{"line":82,"column":12},"end":{"line":91,"column":5}},"line":82},"9":{"name":"(anonymous_9)","decl":{"start":{"line":92,"column":4},"end":{"line":92,"column":5}},"loc":{"start":{"line":92,"column":32},"end":{"line":99,"column":5}},"line":92},"10":{"name":"(anonymous_10)","decl":{"start":{"line":100,"column":4},"end":{"line":100,"column":5}},"loc":{"start":{"line":100,"column":16},"end":{"line":103,"column":5}},"line":100}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":23,"column":8},"end":{"line":27,"column":9}},"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":27,"column":9}},{"start":{"line":23,"column":8},"end":{"line":27,"column":9}}],"line":23},"4":{"loc":{"start":{"line":28,"column":8},"end":{"line":31,"column":9}},"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":31,"column":9}},{"start":{"line":28,"column":8},"end":{"line":31,"column":9}}],"line":28},"5":{"loc":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},{"start":{"line":32,"column":8},"end":{"line":34,"column":9}}],"line":32},"6":{"loc":{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},{"start":{"line":35,"column":8},"end":{"line":37,"column":9}}],"line":35},"7":{"loc":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},{"start":{"line":41,"column":8},"end":{"line":43,"column":9}}],"line":41},"8":{"loc":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},{"start":{"line":50,"column":8},"end":{"line":52,"column":9}}],"line":50},"9":{"loc":{"start":{"line":58,"column":8},"end":{"line":61,"column":9}},"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":61,"column":9}},{"start":{"line":58,"column":8},"end":{"line":61,"column":9}}],"line":58},"10":{"loc":{"start":{"line":66,"column":8},"end":{"line":67,"column":19}},"type":"if","locations":[{"start":{"line":66,"column":8},"end":{"line":67,"column":19}},{"start":{"line":66,"column":8},"end":{"line":67,"column":19}}],"line":66},"11":{"loc":{"start":{"line":68,"column":8},"end":{"line":73,"column":9}},"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":73,"column":9}},{"start":{"line":68,"column":8},"end":{"line":73,"column":9}}],"line":68},"12":{"loc":{"start":{"line":74,"column":8},"end":{"line":75,"column":93}},"type":"if","locations":[{"start":{"line":74,"column":8},"end":{"line":75,"column":93}},{"start":{"line":74,"column":8},"end":{"line":75,"column":93}}],"line":74},"13":{"loc":{"start":{"line":83,"column":8},"end":{"line":85,"column":9}},"type":"if","locations":[{"start":{"line":83,"column":8},"end":{"line":85,"column":9}},{"start":{"line":83,"column":8},"end":{"line":85,"column":9}}],"line":83},"14":{"loc":{"start":{"line":94,"column":8},"end":{"line":98,"column":9}},"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":98,"column":9}},{"start":{"line":94,"column":8},"end":{"line":98,"column":9}}],"line":94},"15":{"loc":{"start":{"line":94,"column":12},"end":{"line":94,"column":142}},"type":"binary-expr","locations":[{"start":{"line":94,"column":12},"end":{"line":94,"column":75}},{"start":{"line":94,"column":79},"end":{"line":94,"column":142}}],"line":94}},"s":{"0":1,"1":4,"2":1,"3":1,"4":1,"5":1,"6":1,"7":27,"8":27,"9":41,"10":93,"11":18,"12":18,"13":18,"14":75,"15":58,"16":58,"17":17,"18":0,"19":17,"20":0,"21":17,"22":14,"23":0,"24":14,"25":14,"26":14,"27":14,"28":28,"29":0,"30":28,"31":28,"32":28,"33":21,"34":10,"35":10,"36":21,"37":21,"38":21,"39":0,"40":21,"41":9,"42":9,"43":9,"44":9,"45":12,"46":0,"47":12,"48":12,"49":12,"50":12,"51":41,"52":7,"53":34,"54":12,"55":12,"56":12,"57":27,"58":27,"59":9,"60":9,"61":9,"62":41,"63":41,"64":1},"f":{"0":4,"1":27,"2":41,"3":93,"4":14,"5":28,"6":21,"7":21,"8":41,"9":27,"10":41},"b":{"0":[1,1,1],"1":[4,0],"2":[4,4],"3":[18,75],"4":[58,17],"5":[0,17],"6":[0,17],"7":[0,14],"8":[0,28],"9":[10,11],"10":[0,21],"11":[9,12],"12":[0,12],"13":[7,34],"14":[9,18],"15":[27,27]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/expression-tree/ExpressionTreeBuilder.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/expression-tree/ExpressionTreeBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import ConditionNode from \"./ConditionNode\";\r\nimport BinaryOperatorNode from \"./BinaryOperatorNode\";\r\nimport IExpressionTreeNode from \"./ExpressionTreeNode\";\r\nimport ExpressionTreeBuildException from \"../exception/ExpressionTreeBuildException\";\r\n\r\nclass BrokenConditionNode extends IExpressionTreeNode {\r\n    public readonly condition: string;\r\n\r\n    constructor(condition: string) {\r\n        super();\r\n        this.condition = condition;\r\n    }\r\n}\r\n\r\nclass ParenthesesMarkerNode extends IExpressionTreeNode { }\r\n\r\nclass ExpressionTreeBuilder {\r\n    private _expressionTree?: IExpressionTreeNode;\r\n    private _nodeStack: IExpressionTreeNode[] = [];\r\n\r\n    public buildCondition(condition: string): void {\r\n        if (!ConditionNode.isValidCondition(condition)) {\r\n            this._nodeStack.push(new BrokenConditionNode(condition));\r\n            this.tryRestoreBrokenCondition();\r\n            return;\r\n        }\r\n        if (this._expressionTree === undefined) {\r\n            this._expressionTree = new ConditionNode(condition);\r\n            return;\r\n        }\r\n        if (!(this._expressionTree instanceof BinaryOperatorNode)) {\r\n            throw new ExpressionTreeBuildException('Bad state: is not binary operator node');\r\n        }\r\n        if (this._expressionTree.rightNode !== undefined) {\r\n            throw new ExpressionTreeBuildException('Bad state: left node already been set');\r\n        }\r\n        this._expressionTree.setRightNode(new ConditionNode(condition));\r\n    }\r\n\r\n    public buildOr(): void {\r\n        if (this._expressionTree === undefined) {\r\n            throw new ExpressionTreeBuildException('Bad state: dangling OR operator');\r\n        }\r\n        const orNode: IExpressionTreeNode = new BinaryOperatorNode('OR');\r\n        orNode.setLeftNode(this._expressionTree);\r\n        this._nodeStack.push(orNode);\r\n        this._expressionTree = undefined;\r\n    }\r\n\r\n    public buildAnd(): void {\r\n        if (this._expressionTree === undefined) {\r\n            throw new ExpressionTreeBuildException('Bad state: dangling AND operator');\r\n        }\r\n        const andNode: IExpressionTreeNode = new BinaryOperatorNode('AND');\r\n        andNode.setLeftNode(this._expressionTree);\r\n        this._expressionTree = andNode;\r\n    }\r\n\r\n    public startBuildParentheses(): void {\r\n        if (this._expressionTree !== undefined) {\r\n            this._nodeStack.push(this._expressionTree);\r\n            this._expressionTree = undefined;\r\n        }\r\n        this._nodeStack.push(new ParenthesesMarkerNode());\r\n    }\r\n\r\n    public endBuildParentheses(): void {\r\n        let stackTop: IExpressionTreeNode | undefined = this._nodeStack.pop();\r\n        if (stackTop === undefined) return;\r\n        if (stackTop instanceof BrokenConditionNode) {\r\n            this._nodeStack.pop();\r\n            this._nodeStack.push(new BrokenConditionNode(`(${(stackTop as BrokenConditionNode).condition})`));\r\n            this.tryRestoreBrokenCondition();\r\n            return;\r\n        }\r\n        if (this._expressionTree === undefined) throw new ExpressionTreeBuildException('Bad state: empty parentheses');\r\n        while (!(stackTop instanceof ParenthesesMarkerNode)) {\r\n            stackTop.setRightNode(this._expressionTree!)\r\n            this._expressionTree = stackTop;\r\n            stackTop = this._nodeStack.pop()!;\r\n        }\r\n    }\r\n\r\n    private flush(): void {\r\n        if (this._expressionTree === undefined) {\r\n            return;\r\n        }\r\n        while (this._nodeStack.length !== 0) {\r\n            const stackTop: IExpressionTreeNode = this._nodeStack.pop()!;\r\n            stackTop.setRightNode(this._expressionTree!)\r\n            this._expressionTree = stackTop;\r\n        }\r\n    }\r\n\r\n    private tryRestoreBrokenCondition() {\r\n        const stackLength: number = this._nodeStack.length;\r\n        if (this._nodeStack[stackLength - 1] instanceof BrokenConditionNode && this._nodeStack[stackLength - 2] instanceof BrokenConditionNode) {\r\n            const node1: BrokenConditionNode = this._nodeStack.pop() as BrokenConditionNode;\r\n            const node2: BrokenConditionNode = this._nodeStack.pop() as BrokenConditionNode;\r\n            this.buildCondition(node2.condition.trim() + ' ' + node1.condition.trim());\r\n        }\r\n    }\r\n\r\n    public getResult(): IExpressionTreeNode | undefined {\r\n        this.flush();\r\n        return this._expressionTree;\r\n    }\r\n}\r\n\r\nexport default ExpressionTreeBuilder;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"78aebe956f68d6688283e0e398e4c9b8db4a248e","contentHash":"8729b26e6a8c85f1b327897ae2c52741313453d0271161cab70ca97ac65f4df3"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\execution-plan\\ExecutionPlanGenerator.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\execution-plan\\ExecutionPlanGenerator.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":19},"end":{"line":6,"column":66}},"4":{"start":{"line":7,"column":23},"end":{"line":7,"column":82}},"5":{"start":{"line":8,"column":24},"end":{"line":8,"column":84}},"6":{"start":{"line":9,"column":27},"end":{"line":9,"column":90}},"7":{"start":{"line":10,"column":29},"end":{"line":10,"column":94}},"8":{"start":{"line":11,"column":42},"end":{"line":11,"column":114}},"9":{"start":{"line":14,"column":8},"end":{"line":14,"column":46}},"10":{"start":{"line":17,"column":8},"end":{"line":31,"column":9}},"11":{"start":{"line":18,"column":12},"end":{"line":18,"column":46}},"12":{"start":{"line":20,"column":13},"end":{"line":31,"column":9}},"13":{"start":{"line":21,"column":12},"end":{"line":21,"column":41}},"14":{"start":{"line":23,"column":13},"end":{"line":31,"column":9}},"15":{"start":{"line":24,"column":12},"end":{"line":24,"column":40}},"16":{"start":{"line":26,"column":13},"end":{"line":31,"column":9}},"17":{"start":{"line":27,"column":12},"end":{"line":27,"column":48}},"18":{"start":{"line":30,"column":12},"end":{"line":30,"column":91}},"19":{"start":{"line":34,"column":8},"end":{"line":35,"column":29}},"20":{"start":{"line":35,"column":12},"end":{"line":35,"column":29}},"21":{"start":{"line":36,"column":8},"end":{"line":44,"column":10}},"22":{"start":{"line":47,"column":25},"end":{"line":47,"column":45}},"23":{"start":{"line":48,"column":8},"end":{"line":59,"column":9}},"24":{"start":{"line":49,"column":12},"end":{"line":57,"column":14}},"25":{"start":{"line":58,"column":12},"end":{"line":58,"column":41}},"26":{"start":{"line":60,"column":26},"end":{"line":60,"column":71}},"27":{"start":{"line":61,"column":8},"end":{"line":61,"column":29}},"28":{"start":{"line":62,"column":30},"end":{"line":62,"column":58}},"29":{"start":{"line":63,"column":8},"end":{"line":71,"column":10}},"30":{"start":{"line":72,"column":8},"end":{"line":72,"column":51}},"31":{"start":{"line":75,"column":25},"end":{"line":75,"column":45}},"32":{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},"33":{"start":{"line":77,"column":12},"end":{"line":77,"column":91}},"34":{"start":{"line":79,"column":30},"end":{"line":79,"column":75}},"35":{"start":{"line":80,"column":8},"end":{"line":80,"column":33}},"36":{"start":{"line":81,"column":34},"end":{"line":81,"column":66}},"37":{"start":{"line":82,"column":31},"end":{"line":82,"column":77}},"38":{"start":{"line":83,"column":8},"end":{"line":83,"column":34}},"39":{"start":{"line":84,"column":35},"end":{"line":84,"column":68}},"40":{"start":{"line":85,"column":8},"end":{"line":91,"column":10}},"41":{"start":{"line":92,"column":8},"end":{"line":92,"column":37}},"42":{"start":{"line":95,"column":25},"end":{"line":95,"column":45}},"43":{"start":{"line":96,"column":8},"end":{"line":102,"column":10}},"44":{"start":{"line":103,"column":8},"end":{"line":103,"column":30}},"45":{"start":{"line":106,"column":25},"end":{"line":106,"column":45}},"46":{"start":{"line":107,"column":26},"end":{"line":107,"column":71}},"47":{"start":{"line":108,"column":28},"end":{"line":108,"column":48}},"48":{"start":{"line":109,"column":35},"end":{"line":109,"column":63}},"49":{"start":{"line":110,"column":8},"end":{"line":130,"column":9}},"50":{"start":{"line":111,"column":12},"end":{"line":117,"column":14}},"51":{"start":{"line":120,"column":12},"end":{"line":120,"column":85}},"52":{"start":{"line":121,"column":33},"end":{"line":121,"column":78}},"53":{"start":{"line":122,"column":12},"end":{"line":128,"column":14}},"54":{"start":{"line":129,"column":12},"end":{"line":129,"column":78}},"55":{"start":{"line":131,"column":8},"end":{"line":131,"column":32}},"56":{"start":{"line":134,"column":0},"end":{"line":134,"column":41}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":32},"end":{"line":15,"column":5}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":15},"end":{"line":32,"column":5}},"line":16},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":23},"end":{"line":45,"column":5}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":46,"column":4},"end":{"line":46,"column":5}},"loc":{"start":{"line":46,"column":28},"end":{"line":73,"column":5}},"line":46},"5":{"name":"(anonymous_5)","decl":{"start":{"line":74,"column":4},"end":{"line":74,"column":5}},"loc":{"start":{"line":74,"column":26},"end":{"line":93,"column":5}},"line":74},"6":{"name":"(anonymous_6)","decl":{"start":{"line":94,"column":4},"end":{"line":94,"column":5}},"loc":{"start":{"line":94,"column":21},"end":{"line":104,"column":5}},"line":94},"7":{"name":"(anonymous_7)","decl":{"start":{"line":105,"column":4},"end":{"line":105,"column":5}},"loc":{"start":{"line":105,"column":20},"end":{"line":132,"column":5}},"line":105}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":17,"column":8},"end":{"line":31,"column":9}},"type":"if","locations":[{"start":{"line":17,"column":8},"end":{"line":31,"column":9}},{"start":{"line":17,"column":8},"end":{"line":31,"column":9}}],"line":17},"4":{"loc":{"start":{"line":20,"column":13},"end":{"line":31,"column":9}},"type":"if","locations":[{"start":{"line":20,"column":13},"end":{"line":31,"column":9}},{"start":{"line":20,"column":13},"end":{"line":31,"column":9}}],"line":20},"5":{"loc":{"start":{"line":23,"column":13},"end":{"line":31,"column":9}},"type":"if","locations":[{"start":{"line":23,"column":13},"end":{"line":31,"column":9}},{"start":{"line":23,"column":13},"end":{"line":31,"column":9}}],"line":23},"6":{"loc":{"start":{"line":26,"column":13},"end":{"line":31,"column":9}},"type":"if","locations":[{"start":{"line":26,"column":13},"end":{"line":31,"column":9}},{"start":{"line":26,"column":13},"end":{"line":31,"column":9}}],"line":26},"7":{"loc":{"start":{"line":34,"column":8},"end":{"line":35,"column":29}},"type":"if","locations":[{"start":{"line":34,"column":8},"end":{"line":35,"column":29}},{"start":{"line":34,"column":8},"end":{"line":35,"column":29}}],"line":34},"8":{"loc":{"start":{"line":48,"column":8},"end":{"line":59,"column":9}},"type":"if","locations":[{"start":{"line":48,"column":8},"end":{"line":59,"column":9}},{"start":{"line":48,"column":8},"end":{"line":59,"column":9}}],"line":48},"9":{"loc":{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":78,"column":9}},{"start":{"line":76,"column":8},"end":{"line":78,"column":9}}],"line":76},"10":{"loc":{"start":{"line":76,"column":12},"end":{"line":76,"column":79}},"type":"binary-expr","locations":[{"start":{"line":76,"column":12},"end":{"line":76,"column":43}},{"start":{"line":76,"column":47},"end":{"line":76,"column":79}}],"line":76},"11":{"loc":{"start":{"line":110,"column":8},"end":{"line":130,"column":9}},"type":"if","locations":[{"start":{"line":110,"column":8},"end":{"line":130,"column":9}},{"start":{"line":110,"column":8},"end":{"line":130,"column":9}}],"line":110}},"s":{"0":1,"1":6,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":105,"10":105,"11":14,"12":91,"13":30,"14":61,"15":40,"16":21,"17":21,"18":0,"19":105,"20":0,"21":105,"22":21,"23":21,"24":5,"25":5,"26":16,"27":16,"28":16,"29":16,"30":16,"31":14,"32":14,"33":0,"34":14,"35":14,"36":14,"37":14,"38":14,"39":14,"40":14,"41":14,"42":30,"43":30,"44":30,"45":40,"46":40,"47":40,"48":40,"49":40,"50":23,"51":17,"52":17,"53":17,"54":17,"55":40,"56":1},"f":{"0":6,"1":105,"2":105,"3":105,"4":21,"5":14,"6":30,"7":40},"b":{"0":[1,1,1],"1":[6,0],"2":[6,6],"3":[14,91],"4":[30,61],"5":[40,21],"6":[21,0],"7":[0,105],"8":[5,16],"9":[0,14],"10":[14,14],"11":[23,17]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/execution-plan/ExecutionPlanGenerator.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/execution-plan/ExecutionPlanGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import injector from '../utility/Injector';\r\nimport IExecutionPlan from './IExecutionPlan';\r\nimport IdGenerator from '../utility/IdGenerator';\r\nimport ServiceLookup from '../lookup/ServiceLookup';\r\nimport RelationNode from '../expression-tree/RelationNode';\r\nimport ConditionNode from '../expression-tree/ConditionNode';\r\nimport OutputTargetNode from '../expression-tree/OutputTargetNode';\r\nimport BinaryOperatorNode from '../expression-tree/BinaryOperatorNode';\r\nimport IExpressionTreeNode from '../expression-tree/ExpressionTreeNode';\r\nimport ExecutionPlanGeneratorException from '../exception/ExecutionPlanGeneratorException';\r\n\r\ninterface InternalExecutionPlan {\r\n    query: string,\r\n    with: Set<string>,\r\n    link: Set<string>,\r\n    where: string,\r\n    orderBy?: string[],\r\n    limit?: number[],\r\n    dependency: { [key: string]: IExecutionPlan }\r\n}\r\n\r\nclass ExecutionPlanGenerator {\r\n    private _expressionTree: IExpressionTreeNode;\r\n    private _executionPlan?: InternalExecutionPlan;\r\n\r\n    constructor(expressionTree: IExpressionTreeNode) {\r\n        this._expressionTree = expressionTree;\r\n    }\r\n\r\n    public generate(): string {\r\n        if (this._expressionTree instanceof BinaryOperatorNode) {\r\n            return this.buildBinaryOperator();\r\n        } else if (this._expressionTree instanceof ConditionNode) {\r\n            return this.buildCondition();\r\n        } else if (this._expressionTree instanceof RelationNode) {\r\n            return this.buildRelation();\r\n        } else if (this._expressionTree instanceof OutputTargetNode) {\r\n            return this.buildOutputTargetNode();\r\n        } else {\r\n            throw new ExecutionPlanGeneratorException('Invalid expression tree');\r\n        }\r\n    }\r\n\r\n    public getExecutionPlan(): IExecutionPlan | undefined {\r\n        if (this._executionPlan === undefined) return undefined;\r\n        return {\r\n            query: this._executionPlan.query,\r\n            with: Array.from(this._executionPlan.with),\r\n            link: Array.from(this._executionPlan.link),\r\n            where: this._executionPlan.where,\r\n            orderBy: this._executionPlan.orderBy,\r\n            limit: this._executionPlan.limit,\r\n            dependency: this._executionPlan.dependency\r\n        }\r\n    }\r\n\r\n    private buildOutputTargetNode(): string {\r\n        const rootNode: OutputTargetNode = this._expressionTree as OutputTargetNode;\r\n        if (rootNode.leftNode === undefined) {\r\n            this._executionPlan = {\r\n                query: rootNode.outputTarget,\r\n                with: new Set<string>([]),\r\n                link: new Set<string>([]),\r\n                where: \"\",\r\n                orderBy: rootNode.orderBy,\r\n                limit: rootNode.limit,\r\n                dependency: {}\r\n            }\r\n\r\n            return rootNode.outputTarget;\r\n        }\r\n\r\n        const Generator = new ExecutionPlanGenerator(rootNode.leftNode!);\r\n        Generator.generate();\r\n        const executionPlan = Generator.getExecutionPlan()!;\r\n\r\n        this._executionPlan = {\r\n            query: rootNode.outputTarget,\r\n            with: new Set<string>(executionPlan.with),\r\n            link: new Set<string>(executionPlan.link),\r\n            where: executionPlan.where,\r\n            orderBy: rootNode.orderBy,\r\n            limit: rootNode.limit,\r\n            dependency: executionPlan.dependency\r\n        }\r\n\r\n        return rootNode.outputTarget.split('.')[0];\r\n    }\r\n\r\n    private buildBinaryOperator(): string {\r\n        const rootNode: BinaryOperatorNode = this._expressionTree as BinaryOperatorNode;\r\n        if (rootNode.leftNode === undefined || rootNode.rightNode === undefined) {\r\n            throw new ExecutionPlanGeneratorException('Invalid expression tree');\r\n        }\r\n\r\n        const leftGenerator = new ExecutionPlanGenerator(rootNode.leftNode);\r\n        leftGenerator.generate();\r\n        const leftExecutionPlan = leftGenerator.getExecutionPlan()!;\r\n\r\n        const rightGenerator = new ExecutionPlanGenerator(rootNode.rightNode);\r\n        rightGenerator.generate();\r\n        const rightExecutionPlan = rightGenerator.getExecutionPlan()!;\r\n\r\n        this._executionPlan = {\r\n            query: rootNode.outputTarget!,\r\n            with: new Set<string>([...leftExecutionPlan.with, ...rightExecutionPlan.with]),\r\n            link: new Set<string>([...leftExecutionPlan.link, ...rightExecutionPlan.link]),\r\n            where: `(${leftExecutionPlan.where} ${rootNode.opType} ${rightExecutionPlan.where})`,\r\n            dependency: { ...leftExecutionPlan.dependency, ...rightExecutionPlan.dependency }\r\n        }\r\n\r\n        return rootNode.outputTarget!;\r\n    }\r\n\r\n    private buildCondition(): string {\r\n        const rootNode: ConditionNode = this._expressionTree as ConditionNode;\r\n        this._executionPlan = {\r\n            query: rootNode.table,\r\n            with: new Set<string>([]),\r\n            link: new Set<string>([]),\r\n            where: rootNode.conditionStr,\r\n            dependency: {}\r\n        };\r\n        return rootNode.table;\r\n    }\r\n\r\n    private buildRelation(): string {\r\n        const rootNode: RelationNode = this._expressionTree as RelationNode;\r\n        const generator = new ExecutionPlanGenerator(rootNode.leftNode!);\r\n        const resultTable = generator.generate();\r\n        const childExecutionPlan = generator.getExecutionPlan()!;\r\n        if (injector.get<ServiceLookup>('ServiceLookup').isAllFromSameService([resultTable, rootNode.toTable])) {\r\n            this._executionPlan = {\r\n                query: rootNode.toTable,\r\n                with: new Set<string>([...childExecutionPlan.with, childExecutionPlan.query]),\r\n                link: new Set<string>([...childExecutionPlan.link, `${rootNode.fromTable}.${rootNode.fromField}=${rootNode.toTable}.${rootNode.toField}`]),\r\n                where: childExecutionPlan.where,\r\n                dependency: childExecutionPlan.dependency\r\n            };\r\n        } else {\r\n            childExecutionPlan.query = `${rootNode.fromTable}.${rootNode.fromField}`;\r\n            const dependencyId = injector.get<IdGenerator>('IdGenerator').nano8();\r\n            this._executionPlan = {\r\n                query: rootNode.toTable,\r\n                with: new Set<string>([]),\r\n                link: new Set<string>([]),\r\n                where: `${rootNode.toTable}.${rootNode.toField} IN {${dependencyId}}`,\r\n                dependency: {}\r\n            };\r\n            this._executionPlan.dependency[dependencyId] = childExecutionPlan\r\n        }\r\n        return rootNode.toTable;\r\n    }\r\n}\r\n\r\nexport default ExecutionPlanGenerator;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b4fc3443a7d23ab92ccf0153fa6be1558e9e619a","contentHash":"32721a4bc9a68f94418d65e587e0ec3bc77aa0a2b69a5c7e40a1576a85953354"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\exception\\ExecutionPlanGeneratorException.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\exception\\ExecutionPlanGeneratorException.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":5,"column":8},"end":{"line":5,"column":23}},"2":{"start":{"line":6,"column":8},"end":{"line":6,"column":31}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":4},"end":{"line":4,"column":5}},"loc":{"start":{"line":4,"column":25},"end":{"line":7,"column":5}},"line":4}},"branchMap":{},"s":{"0":1,"1":0,"2":0,"3":1},"f":{"0":0},"b":{},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/exception/ExecutionPlanGeneratorException.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/exception/ExecutionPlanGeneratorException.ts"],"names":[],"mappings":";;AAAA,MAAqB,+BAAgC,SAAQ,KAAK;IAG9D,YAAY,OAAe;QACvB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;CACJ;AAPD,kDAOC","sourcesContent":["export default class ExecutionPlanGeneratorException extends Error {\r\n    public readonly message: string;\r\n\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.message = message;\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"286f99fea0d9b5f9a0ec1d315d2ff35bb6554f60","contentHash":"5b8a660336dbbf6790e86097fda811ab73f6a41c9fea6e4b54565cb8665950c9"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\lookup\\ServiceLookup.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\lookup\\ServiceLookup.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":19},"end":{"line":6,"column":66}},"4":{"start":{"line":9,"column":8},"end":{"line":9,"column":81}},"5":{"start":{"line":12,"column":8},"end":{"line":12,"column":73}},"6":{"start":{"line":15,"column":8},"end":{"line":15,"column":65}},"7":{"start":{"line":18,"column":8},"end":{"line":19,"column":25}},"8":{"start":{"line":19,"column":12},"end":{"line":19,"column":25}},"9":{"start":{"line":20,"column":25},"end":{"line":20,"column":34}},"10":{"start":{"line":21,"column":8},"end":{"line":28,"column":9}},"11":{"start":{"line":22,"column":12},"end":{"line":27,"column":13}},"12":{"start":{"line":23,"column":16},"end":{"line":23,"column":63}},"13":{"start":{"line":25,"column":17},"end":{"line":27,"column":13}},"14":{"start":{"line":26,"column":16},"end":{"line":26,"column":29}},"15":{"start":{"line":29,"column":8},"end":{"line":29,"column":40}},"16":{"start":{"line":32,"column":0},"end":{"line":32,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":18},"end":{"line":10,"column":5}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":34},"end":{"line":13,"column":5}},"line":11},"3":{"name":"(anonymous_3)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":33},"end":{"line":16,"column":5}},"line":14},"4":{"name":"(anonymous_4)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":33},"end":{"line":30,"column":5}},"line":17}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":18,"column":8},"end":{"line":19,"column":25}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":19,"column":25}},{"start":{"line":18,"column":8},"end":{"line":19,"column":25}}],"line":18},"4":{"loc":{"start":{"line":18,"column":12},"end":{"line":18,"column":55}},"type":"binary-expr","locations":[{"start":{"line":18,"column":12},"end":{"line":18,"column":32}},{"start":{"line":18,"column":36},"end":{"line":18,"column":55}}],"line":18},"5":{"loc":{"start":{"line":22,"column":12},"end":{"line":27,"column":13}},"type":"if","locations":[{"start":{"line":22,"column":12},"end":{"line":27,"column":13}},{"start":{"line":22,"column":12},"end":{"line":27,"column":13}}],"line":22},"6":{"loc":{"start":{"line":25,"column":17},"end":{"line":27,"column":13}},"type":"if","locations":[{"start":{"line":25,"column":17},"end":{"line":27,"column":13}},{"start":{"line":25,"column":17},"end":{"line":27,"column":13}}],"line":25},"7":{"loc":{"start":{"line":25,"column":21},"end":{"line":25,"column":120}},"type":"binary-expr","locations":[{"start":{"line":25,"column":21},"end":{"line":25,"column":68}},{"start":{"line":25,"column":72},"end":{"line":25,"column":120}}],"line":25}},"s":{"0":1,"1":1,"2":1,"3":1,"4":2,"5":24,"6":161,"7":46,"8":1,"9":45,"10":45,"11":91,"12":45,"13":46,"14":19,"15":26,"16":1},"f":{"0":1,"1":2,"2":24,"3":161,"4":46},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[1,45],"4":[46,46],"5":[45,46],"6":[19,27],"7":[46,46]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/lookup/ServiceLookup.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/lookup/ServiceLookup.ts"],"names":[],"mappings":";;;;;AAAA,mEAA2C;AAK3C,MAAM,aAAa;IAAnB;QAEY,wBAAmB,GAAyB,kBAAQ,CAAC,GAAG,CAAuB,qBAAqB,CAAC,CAAC;IAsBlH,CAAC;IApBU,gBAAgB,CAAC,WAAmB;QACvC,OAAO,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,CAAC,WAAW,CAAC,CAAC;IACrE,CAAC;IAEM,qBAAqB,CAAC,KAAa;QACtC,OAAO,IAAI,CAAC,mBAAmB,CAAC,eAAe,EAAE,CAAC,KAAK,CAAC,CAAC;IAC7D,CAAC;IAEM,oBAAoB,CAAC,MAAgB;QACxC,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,KAAK,CAAC;QAC9D,IAAI,UAAU,GAAuB,SAAS,CAAC;QAC/C,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YACxB,IAAI,UAAU,KAAK,SAAS,EAAE;gBAC1B,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;aAClD;iBAAM,IAAI,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,KAAK,SAAS,IAAI,UAAU,KAAK,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,EAAE;gBAC5G,OAAO,KAAK,CAAC;aAChB;SACJ;QACD,OAAO,UAAU,KAAK,SAAS,CAAC;IACpC,CAAC;CACJ;AAED,kBAAe,aAAa,CAAC","sourcesContent":["import injector from '../utility/Injector';\r\nimport IServiceLookup from './IServiceLookup';\r\nimport IServiceConfig from '../data-model/IServiceConfig';\r\nimport IServiceConfigSource from './IServiceConfigSource';\r\n\r\nclass ServiceLookup implements IServiceLookup {\r\n\r\n    private serviceConfigSource: IServiceConfigSource = injector.get<IServiceConfigSource>('ServiceConfigSource');\r\n\r\n    public getServiceConfig(serviceName: string): IServiceConfig {\r\n        return this.serviceConfigSource.getServiceConfigs()[serviceName];\r\n    }\r\n\r\n    public getServiceNameByTable(table: string): string {\r\n        return this.serviceConfigSource.getTableMapping()[table];\r\n    }\r\n\r\n    public isAllFromSameService(tables: string[]): boolean {\r\n        if (tables === undefined || tables.length === 0) return false;\r\n        let refService: string | undefined = undefined;\r\n        for (const table of tables) {\r\n            if (refService === undefined) {\r\n                refService = this.getServiceNameByTable(table);\r\n            } else if (this.getServiceNameByTable(table) === undefined || refService !== this.getServiceNameByTable(table)) {\r\n                return false;\r\n            }\r\n        }\r\n        return refService !== undefined;\r\n    }\r\n}\r\n\r\nexport default ServiceLookup;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c19d8209b38aa7eaa417ad5a72fa8f3d67fbf286","contentHash":"62e734dcff2aa9ebaa4ae14af7dc381290857637e7886d1e05f8b35489e54e64"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\plan-executor\\ExecutionPlanUQLConverter.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\plan-executor\\ExecutionPlanUQLConverter.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":5,"column":23},"end":{"line":5,"column":46}},"2":{"start":{"line":6,"column":8},"end":{"line":8,"column":9}},"3":{"start":{"line":7,"column":12},"end":{"line":7,"column":55}},"4":{"start":{"line":9,"column":8},"end":{"line":11,"column":9}},"5":{"start":{"line":10,"column":12},"end":{"line":10,"column":55}},"6":{"start":{"line":12,"column":8},"end":{"line":14,"column":9}},"7":{"start":{"line":13,"column":12},"end":{"line":13,"column":83}},"8":{"start":{"line":15,"column":8},"end":{"line":17,"column":9}},"9":{"start":{"line":16,"column":12},"end":{"line":16,"column":62}},"10":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"11":{"start":{"line":19,"column":12},"end":{"line":19,"column":68}},"12":{"start":{"line":21,"column":8},"end":{"line":21,"column":32}},"13":{"start":{"line":24,"column":21},"end":{"line":24,"column":26}},"14":{"start":{"line":25,"column":30},"end":{"line":25,"column":53}},"15":{"start":{"line":26,"column":8},"end":{"line":27,"column":26}},"16":{"start":{"line":27,"column":12},"end":{"line":27,"column":26}},"17":{"start":{"line":28,"column":8},"end":{"line":35,"column":9}},"18":{"start":{"line":29,"column":25},"end":{"line":29,"column":49}},"19":{"start":{"line":30,"column":30},"end":{"line":30,"column":32}},"20":{"start":{"line":31,"column":12},"end":{"line":32,"column":37}},"21":{"start":{"line":32,"column":16},"end":{"line":32,"column":37}},"22":{"start":{"line":33,"column":12},"end":{"line":33,"column":100}},"23":{"start":{"line":33,"column":46},"end":{"line":33,"column":82}},"24":{"start":{"line":34,"column":12},"end":{"line":34,"column":70}},"25":{"start":{"line":36,"column":8},"end":{"line":36,"column":22}},"26":{"start":{"line":39,"column":0},"end":{"line":39,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":4},"end":{"line":4,"column":5}},"loc":{"start":{"line":4,"column":30},"end":{"line":22,"column":5}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":41},"end":{"line":37,"column":5}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":33,"column":41},"end":{"line":33,"column":42}},"loc":{"start":{"line":33,"column":46},"end":{"line":33,"column":82}},"line":33}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":8},"end":{"line":8,"column":9}},"type":"if","locations":[{"start":{"line":6,"column":8},"end":{"line":8,"column":9}},{"start":{"line":6,"column":8},"end":{"line":8,"column":9}}],"line":6},"1":{"loc":{"start":{"line":9,"column":8},"end":{"line":11,"column":9}},"type":"if","locations":[{"start":{"line":9,"column":8},"end":{"line":11,"column":9}},{"start":{"line":9,"column":8},"end":{"line":11,"column":9}}],"line":9},"2":{"loc":{"start":{"line":12,"column":8},"end":{"line":14,"column":9}},"type":"if","locations":[{"start":{"line":12,"column":8},"end":{"line":14,"column":9}},{"start":{"line":12,"column":8},"end":{"line":14,"column":9}}],"line":12},"3":{"loc":{"start":{"line":15,"column":8},"end":{"line":17,"column":9}},"type":"if","locations":[{"start":{"line":15,"column":8},"end":{"line":17,"column":9}},{"start":{"line":15,"column":8},"end":{"line":17,"column":9}}],"line":15},"4":{"loc":{"start":{"line":15,"column":12},"end":{"line":15,"column":67}},"type":"binary-expr","locations":[{"start":{"line":15,"column":12},"end":{"line":15,"column":38}},{"start":{"line":15,"column":42},"end":{"line":15,"column":67}}],"line":15},"5":{"loc":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},{"start":{"line":18,"column":8},"end":{"line":20,"column":9}}],"line":18},"6":{"loc":{"start":{"line":18,"column":12},"end":{"line":18,"column":63}},"type":"binary-expr","locations":[{"start":{"line":18,"column":12},"end":{"line":18,"column":36}},{"start":{"line":18,"column":40},"end":{"line":18,"column":63}}],"line":18},"7":{"loc":{"start":{"line":26,"column":8},"end":{"line":27,"column":26}},"type":"if","locations":[{"start":{"line":26,"column":8},"end":{"line":27,"column":26}},{"start":{"line":26,"column":8},"end":{"line":27,"column":26}}],"line":26},"8":{"loc":{"start":{"line":31,"column":12},"end":{"line":32,"column":37}},"type":"if","locations":[{"start":{"line":31,"column":12},"end":{"line":32,"column":37}},{"start":{"line":31,"column":12},"end":{"line":32,"column":37}}],"line":31},"9":{"loc":{"start":{"line":33,"column":46},"end":{"line":33,"column":82}},"type":"cond-expr","locations":[{"start":{"line":33,"column":70},"end":{"line":33,"column":71}},{"start":{"line":33,"column":74},"end":{"line":33,"column":82}}],"line":33}},"s":{"0":1,"1":25,"2":25,"3":8,"4":25,"5":8,"6":25,"7":20,"8":25,"9":4,"10":25,"11":4,"12":25,"13":20,"14":20,"15":20,"16":11,"17":9,"18":12,"19":12,"20":12,"21":0,"22":12,"23":46,"24":12,"25":9,"26":1},"f":{"0":25,"1":20,"2":46},"b":{"0":[8,17],"1":[8,17],"2":[20,5],"3":[4,21],"4":[25,4],"5":[4,21],"6":[25,4],"7":[11,9],"8":[0,12],"9":[35,11]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/plan-executor/ExecutionPlanUQLConverter.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/plan-executor/ExecutionPlanUQLConverter.ts"],"names":[],"mappings":";;AAEA,MAAM,yBAAyB;IACpB,OAAO,CAAC,IAAoB,EAAE,UAAoC;QACrE,MAAM,MAAM,GAAa,CAAC,SAAS,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QACjD,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACxB,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SAC9C;QACD,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACxB,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SAC9C;QACD,IAAI,IAAI,CAAC,KAAK,KAAK,EAAE,EAAE;YACnB,MAAM,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC;SAC1E;QACD,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACzD,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SACrD;QACD,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACrD,MAAM,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;SAC3D;QACD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAEO,iBAAiB,CAAC,KAAa,EAAE,UAAoC;QACzE,IAAI,MAAM,GAAW,KAAK,CAAC;QAC3B,MAAM,aAAa,GAAa,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,MAAM,CAAC;QAC9C,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;YACtC,MAAM,IAAI,GAAU,UAAU,CAAC,YAAY,CAAC,CAAC;YAC7C,IAAI,WAAW,GAAG,EAAE,CAAC;YACrB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;gBAAE,WAAW,GAAG,MAAM,CAAC;YAC5C,WAAW,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;YACxF,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,YAAY,GAAG,EAAE,WAAW,CAAC,CAAC;SAC7D;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AAED,kBAAe,yBAAyB,CAAC","sourcesContent":["import IExecutionPlan from \"../execution-plan/IExecutionPlan\";\r\n\r\nclass ExecutionPlanUQLConverter {\r\n    public convert(plan: IExecutionPlan, dependency: { [key: string]: any[] }): string {\r\n        const result: string[] = [`QUERY ${plan.query}`];\r\n        if (plan.with.length !== 0) {\r\n            result.push(`WITH ${plan.with.join(',')}`);\r\n        }\r\n        if (plan.link.length !== 0) {\r\n            result.push(`LINK ${plan.link.join(',')}`);\r\n        }\r\n        if (plan.where !== '') {\r\n            result.push(`WHERE ${this.replaceDependency(plan.where, dependency)}`);\r\n        }\r\n        if (plan.orderBy !== undefined && plan.orderBy.length !== 0) {\r\n            result.push(`ORDER BY ${plan.orderBy.join(',')}`);\r\n        }\r\n        if (plan.limit !== undefined && plan.limit.length !== 0) {\r\n            result.push(`LIMIT ${plan.limit[0]}, ${plan.limit[1]}`);\r\n        }\r\n        return result.join(' ');\r\n    }\r\n\r\n    private replaceDependency(where: string, dependency: { [key: string]: any[] }): string {\r\n        let result: string = where;\r\n        const dependencyIds: string[] = Object.keys(dependency);\r\n        if (dependencyIds.length === 0) return result;\r\n        for (const dependencyId of dependencyIds) {\r\n            const data: any[] = dependency[dependencyId];\r\n            let replaceWith = '';\r\n            if (data.length === 0) replaceWith = '(\"\")';\r\n            replaceWith = '(' + data.map(e => typeof e === 'number' ? e : `\"${e}\"`).join(',') + ')';\r\n            result = result.replace(`{${dependencyId}}`, replaceWith);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default ExecutionPlanUQLConverter;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ea60c7637f425bb71844f26baffab8976a6c1f6f","contentHash":"3f74eac7962f147992e3e9e3c575874017b8b885422500beb04f4cca1097a97e"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\plan-executor\\PlanExecutor.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\plan-executor\\PlanExecutor.ts","statementMap":{"0":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"1":{"start":{"line":3,"column":28},"end":{"line":3,"column":110}},"2":{"start":{"line":3,"column":91},"end":{"line":3,"column":106}},"3":{"start":{"line":4,"column":4},"end":{"line":9,"column":7}},"4":{"start":{"line":5,"column":36},"end":{"line":5,"column":97}},"5":{"start":{"line":5,"column":42},"end":{"line":5,"column":70}},"6":{"start":{"line":5,"column":85},"end":{"line":5,"column":95}},"7":{"start":{"line":6,"column":35},"end":{"line":6,"column":100}},"8":{"start":{"line":6,"column":41},"end":{"line":6,"column":73}},"9":{"start":{"line":6,"column":88},"end":{"line":6,"column":98}},"10":{"start":{"line":7,"column":32},"end":{"line":7,"column":116}},"11":{"start":{"line":8,"column":8},"end":{"line":8,"column":78}},"12":{"start":{"line":11,"column":22},"end":{"line":13,"column":1}},"13":{"start":{"line":12,"column":4},"end":{"line":12,"column":62}},"14":{"start":{"line":14,"column":0},"end":{"line":14,"column":62}},"15":{"start":{"line":15,"column":19},"end":{"line":15,"column":66}},"16":{"start":{"line":16,"column":36},"end":{"line":16,"column":91}},"17":{"start":{"line":17,"column":32},"end":{"line":17,"column":94}},"18":{"start":{"line":20,"column":8},"end":{"line":20,"column":22}},"19":{"start":{"line":21,"column":8},"end":{"line":21,"column":44}},"20":{"start":{"line":24,"column":8},"end":{"line":69,"column":11}},"21":{"start":{"line":25,"column":29},"end":{"line":25,"column":48}},"22":{"start":{"line":26,"column":34},"end":{"line":26,"column":66}},"23":{"start":{"line":27,"column":37},"end":{"line":27,"column":39}},"24":{"start":{"line":28,"column":12},"end":{"line":38,"column":13}},"25":{"start":{"line":29,"column":42},"end":{"line":29,"column":44}},"26":{"start":{"line":30,"column":16},"end":{"line":33,"column":17}},"27":{"start":{"line":31,"column":37},"end":{"line":31,"column":102}},"28":{"start":{"line":32,"column":20},"end":{"line":32,"column":63}},"29":{"start":{"line":34,"column":32},"end":{"line":34,"column":68}},"30":{"start":{"line":35,"column":16},"end":{"line":37,"column":17}},"31":{"start":{"line":36,"column":20},"end":{"line":36,"column":62}},"32":{"start":{"line":40,"column":31},"end":{"line":40,"column":56}},"33":{"start":{"line":41,"column":32},"end":{"line":41,"column":45}},"34":{"start":{"line":42,"column":32},"end":{"line":42,"column":45}},"35":{"start":{"line":43,"column":32},"end":{"line":43,"column":106}},"36":{"start":{"line":44,"column":31},"end":{"line":44,"column":104}},"37":{"start":{"line":45,"column":30},"end":{"line":45,"column":71}},"38":{"start":{"line":46,"column":24},"end":{"line":46,"column":69}},"39":{"start":{"line":47,"column":24},"end":{"line":49,"column":14}},"40":{"start":{"line":50,"column":12},"end":{"line":55,"column":13}},"41":{"start":{"line":51,"column":16},"end":{"line":51,"column":50}},"42":{"start":{"line":53,"column":17},"end":{"line":55,"column":13}},"43":{"start":{"line":54,"column":16},"end":{"line":54,"column":129}},"44":{"start":{"line":56,"column":26},"end":{"line":56,"column":42}},"45":{"start":{"line":57,"column":12},"end":{"line":68,"column":13}},"46":{"start":{"line":58,"column":16},"end":{"line":61,"column":18}},"47":{"start":{"line":64,"column":16},"end":{"line":67,"column":18}},"48":{"start":{"line":66,"column":40},"end":{"line":66,"column":54}},"49":{"start":{"line":72,"column":0},"end":{"line":72,"column":31}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":44},"end":{"line":2,"column":45}},"loc":{"start":{"line":2,"column":89},"end":{"line":10,"column":1}},"line":2},"1":{"name":"adopt","decl":{"start":{"line":3,"column":13},"end":{"line":3,"column":18}},"loc":{"start":{"line":3,"column":26},"end":{"line":3,"column":112}},"line":3},"2":{"name":"(anonymous_2)","decl":{"start":{"line":3,"column":70},"end":{"line":3,"column":71}},"loc":{"start":{"line":3,"column":89},"end":{"line":3,"column":108}},"line":3},"3":{"name":"(anonymous_3)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":63},"end":{"line":9,"column":5}},"line":4},"4":{"name":"fulfilled","decl":{"start":{"line":5,"column":17},"end":{"line":5,"column":26}},"loc":{"start":{"line":5,"column":34},"end":{"line":5,"column":99}},"line":5},"5":{"name":"rejected","decl":{"start":{"line":6,"column":17},"end":{"line":6,"column":25}},"loc":{"start":{"line":6,"column":33},"end":{"line":6,"column":102}},"line":6},"6":{"name":"step","decl":{"start":{"line":7,"column":17},"end":{"line":7,"column":21}},"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":118}},"line":7},"7":{"name":"(anonymous_7)","decl":{"start":{"line":11,"column":56},"end":{"line":11,"column":57}},"loc":{"start":{"line":11,"column":71},"end":{"line":13,"column":1}},"line":11},"8":{"name":"(anonymous_8)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":35},"end":{"line":22,"column":5}},"line":19},"9":{"name":"(anonymous_9)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":14},"end":{"line":70,"column":5}},"line":23},"10":{"name":"(anonymous_10)","decl":{"start":{"line":24,"column":47},"end":{"line":24,"column":48}},"loc":{"start":{"line":24,"column":60},"end":{"line":69,"column":9}},"line":24},"11":{"name":"(anonymous_11)","decl":{"start":{"line":66,"column":35},"end":{"line":66,"column":36}},"loc":{"start":{"line":66,"column":40},"end":{"line":66,"column":54}},"line":66}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},{"start":{"line":2,"column":25},"end":{"line":2,"column":39}},{"start":{"line":2,"column":44},"end":{"line":10,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":35},"end":{"line":3,"column":109}},"type":"cond-expr","locations":[{"start":{"line":3,"column":56},"end":{"line":3,"column":61}},{"start":{"line":3,"column":64},"end":{"line":3,"column":109}}],"line":3},"2":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"type":"binary-expr","locations":[{"start":{"line":4,"column":16},"end":{"line":4,"column":17}},{"start":{"line":4,"column":22},"end":{"line":4,"column":33}}],"line":4},"3":{"loc":{"start":{"line":7,"column":32},"end":{"line":7,"column":115}},"type":"cond-expr","locations":[{"start":{"line":7,"column":46},"end":{"line":7,"column":67}},{"start":{"line":7,"column":70},"end":{"line":7,"column":115}}],"line":7},"4":{"loc":{"start":{"line":8,"column":51},"end":{"line":8,"column":67}},"type":"binary-expr","locations":[{"start":{"line":8,"column":51},"end":{"line":8,"column":61}},{"start":{"line":8,"column":65},"end":{"line":8,"column":67}}],"line":8},"5":{"loc":{"start":{"line":11,"column":22},"end":{"line":13,"column":1}},"type":"binary-expr","locations":[{"start":{"line":11,"column":23},"end":{"line":11,"column":27}},{"start":{"line":11,"column":31},"end":{"line":11,"column":51}},{"start":{"line":11,"column":56},"end":{"line":13,"column":1}}],"line":11},"6":{"loc":{"start":{"line":12,"column":11},"end":{"line":12,"column":61}},"type":"cond-expr","locations":[{"start":{"line":12,"column":37},"end":{"line":12,"column":40}},{"start":{"line":12,"column":43},"end":{"line":12,"column":61}}],"line":12},"7":{"loc":{"start":{"line":12,"column":12},"end":{"line":12,"column":33}},"type":"binary-expr","locations":[{"start":{"line":12,"column":12},"end":{"line":12,"column":15}},{"start":{"line":12,"column":19},"end":{"line":12,"column":33}}],"line":12},"8":{"loc":{"start":{"line":28,"column":12},"end":{"line":38,"column":13}},"type":"if","locations":[{"start":{"line":28,"column":12},"end":{"line":38,"column":13}},{"start":{"line":28,"column":12},"end":{"line":38,"column":13}}],"line":28},"9":{"loc":{"start":{"line":50,"column":12},"end":{"line":55,"column":13}},"type":"if","locations":[{"start":{"line":50,"column":12},"end":{"line":55,"column":13}},{"start":{"line":50,"column":12},"end":{"line":55,"column":13}}],"line":50},"10":{"loc":{"start":{"line":53,"column":17},"end":{"line":55,"column":13}},"type":"if","locations":[{"start":{"line":53,"column":17},"end":{"line":55,"column":13}},{"start":{"line":53,"column":17},"end":{"line":55,"column":13}}],"line":53},"11":{"loc":{"start":{"line":57,"column":12},"end":{"line":68,"column":13}},"type":"if","locations":[{"start":{"line":57,"column":12},"end":{"line":68,"column":13}},{"start":{"line":57,"column":12},"end":{"line":68,"column":13}}],"line":57},"12":{"loc":{"start":{"line":57,"column":16},"end":{"line":57,"column":64}},"type":"binary-expr","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":41}},{"start":{"line":57,"column":45},"end":{"line":57,"column":64}}],"line":57}},"s":{"0":1,"1":52,"2":0,"3":22,"4":52,"5":52,"6":0,"7":0,"8":0,"9":0,"10":74,"11":22,"12":1,"13":3,"14":1,"15":1,"16":1,"17":1,"18":22,"19":22,"20":22,"21":22,"22":22,"23":22,"24":22,"25":8,"26":8,"27":10,"28":10,"29":8,"30":8,"31":10,"32":22,"33":22,"34":22,"35":22,"36":22,"37":22,"38":22,"39":22,"40":22,"41":0,"42":22,"43":0,"44":22,"45":22,"46":12,"47":10,"48":40,"49":1},"f":{"0":22,"1":52,"2":0,"3":22,"4":52,"5":0,"6":74,"7":3,"8":22,"9":22,"10":22,"11":40},"b":{"0":[1,1,1],"1":[52,0],"2":[22,22],"3":[22,52],"4":[22,22],"5":[1,1,1],"6":[3,0],"7":[3,3],"8":[8,14],"9":[0,22],"10":[0,22],"11":[12,10],"12":[22,11]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/plan-executor/PlanExecutor.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/plan-executor/PlanExecutor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,mEAA2C;AAK3C,4FAAoE;AACpE,+FAAuE;AAEvE,MAAM,YAAY;IAId,YAAY,EAAU,EAAE,aAA6B;QACjD,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACxC,CAAC;IAEY,OAAO;;YAChB,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC;YACrC,MAAM,aAAa,GAAa,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YACjE,MAAM,gBAAgB,GAA2B,EAAE,CAAC;YACpD,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC5B,MAAM,iBAAiB,GAAgC,EAAE,CAAC;gBAC1D,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;oBACtC,MAAM,QAAQ,GAAG,IAAI,YAAY,CAAC,YAAY,EAAE,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;oBACnF,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;iBAC9C;gBACD,MAAM,OAAO,GAAuB,MAAM,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;gBACzE,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;oBAC1B,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC;iBAC7C;aACJ;YAAA,CAAC;YACF,MAAM,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,WAAW,GAAuB,UAAU,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,WAAW,GAAW,kBAAQ,CAAC,GAAG,CAAgB,eAAe,CAAC,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;YAC5G,MAAM,UAAU,GAAW,kBAAQ,CAAC,GAAG,CAAgB,eAAe,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC;YAE1G,MAAM,SAAS,GAAG,IAAI,mCAAyB,EAAE,CAAC;YAClD,MAAM,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;YAE1D,MAAM,GAAG,GAAG,MAAM,kBAAQ,CAAC,GAAG,CAAa,YAAY,CAAC,CAAC,KAAK,CAC1D,GAAG,UAAU,QAAQ,EAAE;gBACvB,IAAI,EAAE,GAAG;aACZ,CAAC,CAAC;YAEH,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;gBACpB,OAAO,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;aACrC;iBAAM,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,EAAE;gBAC1B,MAAM,IAAI,+BAAqB,CAAC,WAAW,WAAW,aAAa,GAAG,CAAC,MAAM,mBAAmB,GAAG,EAAE,CAAC,CAAC;aAC1G;YAED,MAAM,IAAI,GAAU,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAU,CAAC;YAEhD,IAAI,WAAW,KAAK,SAAS,IAAI,IAAI,CAAC,GAAG,KAAK,MAAM,EAAE;gBAClD,OAAO;oBACH,EAAE,EAAE,IAAI,CAAC,GAAG;oBACZ,IAAI,EAAE,IAAI;iBACb,CAAA;aACJ;iBAAM;gBACH,OAAO;oBACH,EAAE,EAAE,IAAI,CAAC,GAAG;oBACZ,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;iBACtC,CAAA;aACJ;QACL,CAAC;KAAA;CACJ;AAED,kBAAe,YAAY,CAAC","sourcesContent":["import injector from \"../utility/Injector\";\r\nimport FetchProxy from \"../utility/FetchProxy\";\r\nimport IExecutionResult from \"./IExecutionResult\";\r\nimport ServiceLookup from \"../lookup/ServiceLookup\";\r\nimport IExecutionPlan from \"../execution-plan/IExecutionPlan\";\r\nimport ExecutionPlanUQLConverter from \"./ExecutionPlanUQLConverter\";\r\nimport PlanExecutorException from \"../exception/PlanExecutorException\";\r\n\r\nclass PlanExecutor {\r\n    private _id: string;\r\n    private _executionPlan: IExecutionPlan;\r\n\r\n    constructor(id: string, executionPlan: IExecutionPlan) {\r\n        this._id = id;\r\n        this._executionPlan = executionPlan;\r\n    }\r\n\r\n    public async execute(): Promise<IExecutionResult> {\r\n        const rootPlan = this._executionPlan;\r\n        const dependencyIds: string[] = Object.keys(rootPlan.dependency);\r\n        const dependencyResult: { [key: string]: any } = {};\r\n        if (dependencyIds.length !== 0) {\r\n            const executionPromises: Promise<IExecutionResult>[] = [];\r\n            for (const dependencyId of dependencyIds) {\r\n                const executor = new PlanExecutor(dependencyId, rootPlan.dependency[dependencyId]);\r\n                executionPromises.push(executor.execute());\r\n            }\r\n            const results: IExecutionResult[] = await Promise.all(executionPromises);\r\n            for (const result of results) {\r\n                dependencyResult[result.id] = result.data;\r\n            }\r\n        };\r\n        const splitQuery = rootPlan.query.split('.');\r\n        const targetTable = splitQuery[0];\r\n        const targetField: string | undefined = splitQuery[1];\r\n        const serviceName: string = injector.get<ServiceLookup>('ServiceLookup').getServiceNameByTable(targetTable);\r\n        const requestUrl: string = injector.get<ServiceLookup>('ServiceLookup').getServiceConfig(serviceName).url;\r\n\r\n        const converter = new ExecutionPlanUQLConverter();\r\n        const uql = converter.convert(rootPlan, dependencyResult);\r\n\r\n        const res = await injector.get<FetchProxy>('FetchProxy').fetch(\r\n            `${requestUrl}/query`, {\r\n            body: uql\r\n        });\r\n\r\n        if (res.status === 404) {\r\n            return { id: this._id, data: [] };\r\n        } else if (res.status >= 400) {\r\n            throw new PlanExecutorException(`Service ${serviceName} response ${res.status} when executing ${uql}`);\r\n        }\r\n\r\n        const data: any[] = (await res.json()) as any[];\r\n\r\n        if (targetField === undefined || this._id === 'root') {\r\n            return {\r\n                id: this._id,\r\n                data: data\r\n            }\r\n        } else {\r\n            return {\r\n                id: this._id,\r\n                data: data.map(e => e[targetField])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default PlanExecutor;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"84d40a4603d0f1619d70ed7441d41d09b253109d","contentHash":"2869d842090d115c774ed12a5c19674cf6b387e05020490a06ca8a9b784b453f"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\exception\\PlanExecutorException.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\exception\\PlanExecutorException.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":5,"column":8},"end":{"line":5,"column":23}},"2":{"start":{"line":6,"column":8},"end":{"line":6,"column":31}},"3":{"start":{"line":9,"column":0},"end":{"line":9,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":4},"end":{"line":4,"column":5}},"loc":{"start":{"line":4,"column":25},"end":{"line":7,"column":5}},"line":4}},"branchMap":{},"s":{"0":1,"1":0,"2":0,"3":1},"f":{"0":0},"b":{},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/exception/PlanExecutorException.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/exception/PlanExecutorException.ts"],"names":[],"mappings":";;AAAA,MAAqB,qBAAsB,SAAQ,KAAK;IAGpD,YAAY,OAAe;QACvB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;CACJ;AAPD,wCAOC","sourcesContent":["export default class PlanExecutorException extends Error {\r\n    public readonly message: string;\r\n\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.message = message;\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"96c5259d272e984f6a7c2e3962df905ba37e7e74","contentHash":"2a62a9d75bab97d690832fbff7a2f9f690d1169d90c26742bd7d6c3af6897633"},"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\unify-ql\\UnifyQL.ts":{"path":"E:\\files\\lab\\UQL\\UnifyQL_ts\\src\\unify-ql\\UnifyQL.ts","statementMap":{"0":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"1":{"start":{"line":3,"column":28},"end":{"line":3,"column":110}},"2":{"start":{"line":3,"column":91},"end":{"line":3,"column":106}},"3":{"start":{"line":4,"column":4},"end":{"line":9,"column":7}},"4":{"start":{"line":5,"column":36},"end":{"line":5,"column":97}},"5":{"start":{"line":5,"column":42},"end":{"line":5,"column":70}},"6":{"start":{"line":5,"column":85},"end":{"line":5,"column":95}},"7":{"start":{"line":6,"column":35},"end":{"line":6,"column":100}},"8":{"start":{"line":6,"column":41},"end":{"line":6,"column":73}},"9":{"start":{"line":6,"column":88},"end":{"line":6,"column":98}},"10":{"start":{"line":7,"column":32},"end":{"line":7,"column":116}},"11":{"start":{"line":8,"column":8},"end":{"line":8,"column":78}},"12":{"start":{"line":11,"column":22},"end":{"line":13,"column":1}},"13":{"start":{"line":12,"column":4},"end":{"line":12,"column":62}},"14":{"start":{"line":14,"column":0},"end":{"line":14,"column":62}},"15":{"start":{"line":15,"column":23},"end":{"line":15,"column":80}},"16":{"start":{"line":16,"column":28},"end":{"line":16,"column":88}},"17":{"start":{"line":17,"column":27},"end":{"line":17,"column":90}},"18":{"start":{"line":18,"column":32},"end":{"line":18,"column":101}},"19":{"start":{"line":19,"column":31},"end":{"line":19,"column":98}},"20":{"start":{"line":20,"column":33},"end":{"line":20,"column":101}},"21":{"start":{"line":24,"column":8},"end":{"line":39,"column":11}},"22":{"start":{"line":25,"column":28},"end":{"line":25,"column":73}},"23":{"start":{"line":26,"column":38},"end":{"line":26,"column":118}},"24":{"start":{"line":27,"column":31},"end":{"line":27,"column":56}},"25":{"start":{"line":28,"column":27},"end":{"line":28,"column":63}},"26":{"start":{"line":29,"column":35},"end":{"line":29,"column":115}},"27":{"start":{"line":30,"column":29},"end":{"line":30,"column":87}},"28":{"start":{"line":31,"column":12},"end":{"line":31,"column":30}},"29":{"start":{"line":32,"column":33},"end":{"line":32,"column":53}},"30":{"start":{"line":33,"column":30},"end":{"line":33,"column":80}},"31":{"start":{"line":34,"column":12},"end":{"line":34,"column":33}},"32":{"start":{"line":35,"column":34},"end":{"line":35,"column":62}},"33":{"start":{"line":36,"column":29},"end":{"line":36,"column":78}},"34":{"start":{"line":37,"column":27},"end":{"line":37,"column":51}},"35":{"start":{"line":38,"column":12},"end":{"line":38,"column":31}},"36":{"start":{"line":42,"column":0},"end":{"line":42,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":44},"end":{"line":2,"column":45}},"loc":{"start":{"line":2,"column":89},"end":{"line":10,"column":1}},"line":2},"1":{"name":"adopt","decl":{"start":{"line":3,"column":13},"end":{"line":3,"column":18}},"loc":{"start":{"line":3,"column":26},"end":{"line":3,"column":112}},"line":3},"2":{"name":"(anonymous_2)","decl":{"start":{"line":3,"column":70},"end":{"line":3,"column":71}},"loc":{"start":{"line":3,"column":89},"end":{"line":3,"column":108}},"line":3},"3":{"name":"(anonymous_3)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":63},"end":{"line":9,"column":5}},"line":4},"4":{"name":"fulfilled","decl":{"start":{"line":5,"column":17},"end":{"line":5,"column":26}},"loc":{"start":{"line":5,"column":34},"end":{"line":5,"column":99}},"line":5},"5":{"name":"rejected","decl":{"start":{"line":6,"column":17},"end":{"line":6,"column":25}},"loc":{"start":{"line":6,"column":33},"end":{"line":6,"column":102}},"line":6},"6":{"name":"step","decl":{"start":{"line":7,"column":17},"end":{"line":7,"column":21}},"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":118}},"line":7},"7":{"name":"(anonymous_7)","decl":{"start":{"line":11,"column":56},"end":{"line":11,"column":57}},"loc":{"start":{"line":11,"column":71},"end":{"line":13,"column":1}},"line":11},"8":{"name":"(anonymous_8)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":18},"end":{"line":22,"column":21}},"line":22},"9":{"name":"(anonymous_9)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":19},"end":{"line":40,"column":5}},"line":23},"10":{"name":"(anonymous_10)","decl":{"start":{"line":24,"column":47},"end":{"line":24,"column":48}},"loc":{"start":{"line":24,"column":60},"end":{"line":39,"column":9}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},{"start":{"line":2,"column":25},"end":{"line":2,"column":39}},{"start":{"line":2,"column":44},"end":{"line":10,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":35},"end":{"line":3,"column":109}},"type":"cond-expr","locations":[{"start":{"line":3,"column":56},"end":{"line":3,"column":61}},{"start":{"line":3,"column":64},"end":{"line":3,"column":109}}],"line":3},"2":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"type":"binary-expr","locations":[{"start":{"line":4,"column":16},"end":{"line":4,"column":17}},{"start":{"line":4,"column":22},"end":{"line":4,"column":33}}],"line":4},"3":{"loc":{"start":{"line":7,"column":32},"end":{"line":7,"column":115}},"type":"cond-expr","locations":[{"start":{"line":7,"column":46},"end":{"line":7,"column":67}},{"start":{"line":7,"column":70},"end":{"line":7,"column":115}}],"line":7},"4":{"loc":{"start":{"line":8,"column":51},"end":{"line":8,"column":67}},"type":"binary-expr","locations":[{"start":{"line":8,"column":51},"end":{"line":8,"column":61}},{"start":{"line":8,"column":65},"end":{"line":8,"column":67}}],"line":8},"5":{"loc":{"start":{"line":11,"column":22},"end":{"line":13,"column":1}},"type":"binary-expr","locations":[{"start":{"line":11,"column":23},"end":{"line":11,"column":27}},{"start":{"line":11,"column":31},"end":{"line":11,"column":51}},{"start":{"line":11,"column":56},"end":{"line":13,"column":1}}],"line":11},"6":{"loc":{"start":{"line":12,"column":11},"end":{"line":12,"column":61}},"type":"cond-expr","locations":[{"start":{"line":12,"column":37},"end":{"line":12,"column":40}},{"start":{"line":12,"column":43},"end":{"line":12,"column":61}}],"line":12},"7":{"loc":{"start":{"line":12,"column":12},"end":{"line":12,"column":33}},"type":"binary-expr","locations":[{"start":{"line":12,"column":12},"end":{"line":12,"column":15}},{"start":{"line":12,"column":19},"end":{"line":12,"column":33}}],"line":12}},"s":{"0":1,"1":7,"2":0,"3":7,"4":7,"5":7,"6":0,"7":0,"8":0,"9":0,"10":14,"11":7,"12":1,"13":6,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":7,"22":7,"23":7,"24":7,"25":7,"26":7,"27":7,"28":7,"29":7,"30":7,"31":7,"32":7,"33":7,"34":7,"35":7,"36":1},"f":{"0":7,"1":7,"2":0,"3":7,"4":7,"5":0,"6":14,"7":6,"8":7,"9":7,"10":7},"b":{"0":[1,1,1],"1":[7,0],"2":[7,7],"3":[7,7],"4":[7,7],"5":[1,1,1],"6":[6,0],"7":[6,6]},"inputSourceMap":{"version":3,"file":"E:/files/lab/UQL/UnifyQL_ts/src/unify-ql/UnifyQL.ts","sources":["E:/files/lab/UQL/UnifyQL_ts/src/unify-ql/UnifyQL.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAEA,iFAAyD;AACzD,yFAAiE;AACjE,2FAAmE;AAEnE,sGAAyE;AACzE,mGAA2E;AAC3E,sGAA8E;AAE9E,MAAM,OAAO;IAET,gBAAgB,CAAC;IAEJ,KAAK,CAAC,OAAe;;YAC9B,MAAM,OAAO,GAAG,IAAA,+BAAgB,EAAC,OAAO,CAAC,CAAC;YAC1C,MAAM,iBAAiB,GAAsB,IAAI,2BAAiB,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;YACpH,MAAM,UAAU,GAAG,iBAAiB,CAAC,KAAK,EAAE,CAAC;YAE7C,MAAM,MAAM,GAAyB,IAAI,8BAAoB,EAAE,CAAC;YAChE,MAAM,cAAc,GAAwB,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;YAE7H,MAAM,QAAQ,GAAqB,IAAI,0BAAgB,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;YACpF,QAAQ,CAAC,MAAM,EAAE,CAAC;YAClB,MAAM,YAAY,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;YAE1C,MAAM,SAAS,GAA2B,IAAI,gCAAsB,CAAC,YAAY,CAAC,CAAC;YACnF,SAAS,CAAC,QAAQ,EAAE,CAAC;YAErB,MAAM,aAAa,GAAG,SAAS,CAAC,gBAAgB,EAAG,CAAC;YAEpD,MAAM,QAAQ,GAAG,IAAI,sBAAY,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YACzD,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,OAAO,EAAE,CAAC;YAExC,OAAO,MAAM,CAAC,IAAI,CAAC;QACvB,CAAC;KAAA;CACJ;AAED,kBAAe,OAAO,CAAC","sourcesContent":["import IUnifyQL from \"./IUnifyQL\";\r\n\r\nimport PlanExecutor from \"../plan-executor/PlanExecutor\";\r\nimport QueryChainBuilder from \"../query-chain/QueryChainBuilder\";\r\nimport RelationExpander from \"../relation-expand/RelationExpander\";\r\nimport IExpressionTreeNode from \"../expression-tree/ExpressionTreeNode\";\r\nimport extractQLElement from \"../unify-ql-element/ExtractUnifyQlElement\";\r\nimport ExpressionTreeParser from \"../expression-tree/ExpressionTreeParser\";\r\nimport ExecutionPlanGenerator from \"../execution-plan/ExecutionPlanGenerator\";\r\n\r\nclass UnifyQL implements IUnifyQL {\r\n\r\n    constructor() { }\r\n\r\n    public async query(unifyQl: string): Promise<any> {\r\n        const element = extractQLElement(unifyQl);\r\n        const queryChainBuilder: QueryChainBuilder = new QueryChainBuilder(element.queryTarget, element.with, element.link);\r\n        const queryChain = queryChainBuilder.build();\r\n\r\n        const parser: ExpressionTreeParser = new ExpressionTreeParser();\r\n        const expressionTree: IExpressionTreeNode = parser.parse(element.queryTarget, element.where, element.orderBy, element.limit);\r\n\r\n        const expander: RelationExpander = new RelationExpander(expressionTree, queryChain);\r\n        expander.expand();\r\n        const expandedTree = expander.getResult();\r\n\r\n        const generator: ExecutionPlanGenerator = new ExecutionPlanGenerator(expandedTree);\r\n        generator.generate();\r\n\r\n        const executionPlan = generator.getExecutionPlan()!;\r\n\r\n        const executor = new PlanExecutor('root', executionPlan);\r\n        const result = await executor.execute();\r\n\r\n        return result.data;\r\n    }\r\n}\r\n\r\nexport default UnifyQL;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a5fa2a8e267018aef369a8af8db9df7ede88de39","contentHash":"4daa8c1e9426b35f314ddac152cce22bff240314513ae814c5bfa9211c2e3d3f"}}